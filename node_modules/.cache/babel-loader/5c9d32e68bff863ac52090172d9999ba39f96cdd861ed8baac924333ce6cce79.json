{"ast":null,"code":"import { Loader, FileLoader, Matrix3, Vector2, Vector3, ShapeUtils, Box2, Shape, Path, BufferGeometry, Float32BufferAttribute, ShapePath } from \"three\";\nconst COLOR_SPACE_SVG = \"srgb\";\nclass SVGLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.defaultDPI = 90;\n    this.defaultUnit = \"px\";\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(text) {\n    const scope = this;\n    function parseNode(node, style) {\n      if (node.nodeType !== 1) return;\n      const transform = getNodeTransform(node);\n      let isDefsNode = false;\n      let path = null;\n      switch (node.nodeName) {\n        case \"svg\":\n          style = parseStyle(node, style);\n          break;\n        case \"style\":\n          parseCSSStylesheet(node);\n          break;\n        case \"g\":\n          style = parseStyle(node, style);\n          break;\n        case \"path\":\n          style = parseStyle(node, style);\n          if (node.hasAttribute(\"d\")) path = parsePathNode(node);\n          break;\n        case \"rect\":\n          style = parseStyle(node, style);\n          path = parseRectNode(node);\n          break;\n        case \"polygon\":\n          style = parseStyle(node, style);\n          path = parsePolygonNode(node);\n          break;\n        case \"polyline\":\n          style = parseStyle(node, style);\n          path = parsePolylineNode(node);\n          break;\n        case \"circle\":\n          style = parseStyle(node, style);\n          path = parseCircleNode(node);\n          break;\n        case \"ellipse\":\n          style = parseStyle(node, style);\n          path = parseEllipseNode(node);\n          break;\n        case \"line\":\n          style = parseStyle(node, style);\n          path = parseLineNode(node);\n          break;\n        case \"defs\":\n          isDefsNode = true;\n          break;\n        case \"use\":\n          style = parseStyle(node, style);\n          const href = node.getAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\") || \"\";\n          const usedNodeId = href.substring(1);\n          const usedNode = node.viewportElement.getElementById(usedNodeId);\n          if (usedNode) {\n            parseNode(usedNode, style);\n          } else {\n            console.warn(\"SVGLoader: 'use node' references non-existent node id: \" + usedNodeId);\n          }\n          break;\n      }\n      if (path) {\n        if (style.fill !== void 0 && style.fill !== \"none\") {\n          path.color.setStyle(style.fill, COLOR_SPACE_SVG);\n        }\n        transformPath(path, currentTransform);\n        paths.push(path);\n        path.userData = {\n          node,\n          style\n        };\n      }\n      const childNodes = node.childNodes;\n      for (let i = 0; i < childNodes.length; i++) {\n        const node2 = childNodes[i];\n        if (isDefsNode && node2.nodeName !== \"style\" && node2.nodeName !== \"defs\") {\n          continue;\n        }\n        parseNode(node2, style);\n      }\n      if (transform) {\n        transformStack.pop();\n        if (transformStack.length > 0) {\n          currentTransform.copy(transformStack[transformStack.length - 1]);\n        } else {\n          currentTransform.identity();\n        }\n      }\n    }\n    function parsePathNode(node) {\n      const path = new ShapePath();\n      const point = new Vector2();\n      const control = new Vector2();\n      const firstPoint = new Vector2();\n      let isFirstPoint = true;\n      let doSetFirstPoint = false;\n      const d = node.getAttribute(\"d\");\n      if (d === \"\" || d === \"none\") return null;\n      const commands = d.match(/[a-df-z][^a-df-z]*/gi);\n      for (let i = 0, l = commands.length; i < l; i++) {\n        const command = commands[i];\n        const type = command.charAt(0);\n        const data2 = command.slice(1).trim();\n        if (isFirstPoint === true) {\n          doSetFirstPoint = true;\n          isFirstPoint = false;\n        }\n        let numbers;\n        switch (type) {\n          case \"M\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n              if (j === 0) firstPoint.copy(point);\n            }\n            break;\n          case \"H\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"V\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"L\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"C\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], numbers[j + 5]);\n              control.x = numbers[j + 2];\n              control.y = numbers[j + 3];\n              point.x = numbers[j + 4];\n              point.y = numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"S\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"Q\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"T\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"A\":\n            numbers = parseFloats(data2, [3, 4], 7);\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              if (numbers[j + 5] == point.x && numbers[j + 6] == point.y) continue;\n              const start = point.clone();\n              point.x = numbers[j + 5];\n              point.y = numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"m\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n              if (j === 0) firstPoint.copy(point);\n            }\n            break;\n          case \"h\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"v\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"l\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"c\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3], point.x + numbers[j + 4], point.y + numbers[j + 5]);\n              control.x = point.x + numbers[j + 2];\n              control.y = point.y + numbers[j + 3];\n              point.x += numbers[j + 4];\n              point.y += numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"s\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"q\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"t\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = point.x + numbers[j + 0];\n              point.y = point.y + numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"a\":\n            numbers = parseFloats(data2, [3, 4], 7);\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              if (numbers[j + 5] == 0 && numbers[j + 6] == 0) continue;\n              const start = point.clone();\n              point.x += numbers[j + 5];\n              point.y += numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"Z\":\n          case \"z\":\n            path.currentPath.autoClose = true;\n            if (path.currentPath.curves.length > 0) {\n              point.copy(firstPoint);\n              path.currentPath.currentPoint.copy(point);\n              isFirstPoint = true;\n            }\n            break;\n          default:\n            console.warn(command);\n        }\n        doSetFirstPoint = false;\n      }\n      return path;\n    }\n    function parseCSSStylesheet(node) {\n      if (!node.sheet || !node.sheet.cssRules || !node.sheet.cssRules.length) return;\n      for (let i = 0; i < node.sheet.cssRules.length; i++) {\n        const stylesheet = node.sheet.cssRules[i];\n        if (stylesheet.type !== 1) continue;\n        const selectorList = stylesheet.selectorText.split(/,/gm).filter(Boolean).map(i2 => i2.trim());\n        for (let j = 0; j < selectorList.length; j++) {\n          const definitions = Object.fromEntries(Object.entries(stylesheet.style).filter(_ref => {\n            let [, v] = _ref;\n            return v !== \"\";\n          }));\n          stylesheets[selectorList[j]] = Object.assign(stylesheets[selectorList[j]] || {}, definitions);\n        }\n      }\n    }\n    function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n      if (rx == 0 || ry == 0) {\n        path.lineTo(end.x, end.y);\n        return;\n      }\n      x_axis_rotation = x_axis_rotation * Math.PI / 180;\n      rx = Math.abs(rx);\n      ry = Math.abs(ry);\n      const dx2 = (start.x - end.x) / 2;\n      const dy2 = (start.y - end.y) / 2;\n      const x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n      const y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2;\n      let rxs = rx * rx;\n      let rys = ry * ry;\n      const x1ps = x1p * x1p;\n      const y1ps = y1p * y1p;\n      const cr = x1ps / rxs + y1ps / rys;\n      if (cr > 1) {\n        const s = Math.sqrt(cr);\n        rx = s * rx;\n        ry = s * ry;\n        rxs = rx * rx;\n        rys = ry * ry;\n      }\n      const dq = rxs * y1ps + rys * x1ps;\n      const pq = (rxs * rys - dq) / dq;\n      let q = Math.sqrt(Math.max(0, pq));\n      if (large_arc_flag === sweep_flag) q = -q;\n      const cxp = q * rx * y1p / ry;\n      const cyp = -q * ry * x1p / rx;\n      const cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n      const cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2;\n      const theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n      const delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n      path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n    }\n    function svgAngle(ux, uy, vx, vy) {\n      const dot = ux * vx + uy * vy;\n      const len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n      let ang = Math.acos(Math.max(-1, Math.min(1, dot / len)));\n      if (ux * vy - uy * vx < 0) ang = -ang;\n      return ang;\n    }\n    function parseRectNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"x\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"y\") || 0);\n      const rx = parseFloatWithUnits(node.getAttribute(\"rx\") || node.getAttribute(\"ry\") || 0);\n      const ry = parseFloatWithUnits(node.getAttribute(\"ry\") || node.getAttribute(\"rx\") || 0);\n      const w = parseFloatWithUnits(node.getAttribute(\"width\"));\n      const h = parseFloatWithUnits(node.getAttribute(\"height\"));\n      const bci = 1 - 0.551915024494;\n      const path = new ShapePath();\n      path.moveTo(x + rx, y);\n      path.lineTo(x + w - rx, y);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w - rx * bci, y, x + w, y + ry * bci, x + w, y + ry);\n      }\n      path.lineTo(x + w, y + h - ry);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w, y + h - ry * bci, x + w - rx * bci, y + h, x + w - rx, y + h);\n      }\n      path.lineTo(x + rx, y + h);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + rx * bci, y + h, x, y + h - ry * bci, x, y + h - ry);\n      }\n      path.lineTo(x, y + ry);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x, y + ry * bci, x + rx * bci, y, x + rx, y);\n      }\n      return path;\n    }\n    function parsePolygonNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n        index++;\n      }\n      const regex = /([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)(?:,|\\s)([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute(\"points\").replace(regex, iterator);\n      path.currentPath.autoClose = true;\n      return path;\n    }\n    function parsePolylineNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n        index++;\n      }\n      const regex = /([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)(?:,|\\s)([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute(\"points\").replace(regex, iterator);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n    function parseCircleNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"cx\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"cy\") || 0);\n      const r = parseFloatWithUnits(node.getAttribute(\"r\") || 0);\n      const subpath = new Path();\n      subpath.absarc(x, y, r, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n    function parseEllipseNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"cx\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"cy\") || 0);\n      const rx = parseFloatWithUnits(node.getAttribute(\"rx\") || 0);\n      const ry = parseFloatWithUnits(node.getAttribute(\"ry\") || 0);\n      const subpath = new Path();\n      subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n    function parseLineNode(node) {\n      const x1 = parseFloatWithUnits(node.getAttribute(\"x1\") || 0);\n      const y1 = parseFloatWithUnits(node.getAttribute(\"y1\") || 0);\n      const x2 = parseFloatWithUnits(node.getAttribute(\"x2\") || 0);\n      const y2 = parseFloatWithUnits(node.getAttribute(\"y2\") || 0);\n      const path = new ShapePath();\n      path.moveTo(x1, y1);\n      path.lineTo(x2, y2);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n    function parseStyle(node, style) {\n      style = Object.assign({}, style);\n      let stylesheetStyles = {};\n      if (node.hasAttribute(\"class\")) {\n        const classSelectors = node.getAttribute(\"class\").split(/\\s/).filter(Boolean).map(i => i.trim());\n        for (let i = 0; i < classSelectors.length; i++) {\n          stylesheetStyles = Object.assign(stylesheetStyles, stylesheets[\".\" + classSelectors[i]]);\n        }\n      }\n      if (node.hasAttribute(\"id\")) {\n        stylesheetStyles = Object.assign(stylesheetStyles, stylesheets[\"#\" + node.getAttribute(\"id\")]);\n      }\n      function addStyle(svgName, jsName, adjustFunction) {\n        if (adjustFunction === void 0) adjustFunction = function copy(v) {\n          if (v.startsWith(\"url\")) console.warn(\"SVGLoader: url access in attributes is not implemented.\");\n          return v;\n        };\n        if (node.hasAttribute(svgName)) style[jsName] = adjustFunction(node.getAttribute(svgName));\n        if (stylesheetStyles[svgName]) style[jsName] = adjustFunction(stylesheetStyles[svgName]);\n        if (node.style && node.style[svgName] !== \"\") style[jsName] = adjustFunction(node.style[svgName]);\n      }\n      function clamp(v) {\n        return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n      }\n      function positive(v) {\n        return Math.max(0, parseFloatWithUnits(v));\n      }\n      addStyle(\"fill\", \"fill\");\n      addStyle(\"fill-opacity\", \"fillOpacity\", clamp);\n      addStyle(\"fill-rule\", \"fillRule\");\n      addStyle(\"opacity\", \"opacity\", clamp);\n      addStyle(\"stroke\", \"stroke\");\n      addStyle(\"stroke-opacity\", \"strokeOpacity\", clamp);\n      addStyle(\"stroke-width\", \"strokeWidth\", positive);\n      addStyle(\"stroke-linejoin\", \"strokeLineJoin\");\n      addStyle(\"stroke-linecap\", \"strokeLineCap\");\n      addStyle(\"stroke-miterlimit\", \"strokeMiterLimit\", positive);\n      addStyle(\"visibility\", \"visibility\");\n      return style;\n    }\n    function getReflection(a, b) {\n      return a - (b - a);\n    }\n    function parseFloats(input, flags, stride) {\n      if (typeof input !== \"string\") {\n        throw new TypeError(\"Invalid input: \" + typeof input);\n      }\n      const RE = {\n        SEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n        WHITESPACE: /[ \\t\\r\\n]/,\n        DIGIT: /[\\d]/,\n        SIGN: /[-+]/,\n        POINT: /\\./,\n        COMMA: /,/,\n        EXP: /e/i,\n        FLAGS: /[01]/\n      };\n      const SEP = 0;\n      const INT = 1;\n      const FLOAT = 2;\n      const EXP = 3;\n      let state = SEP;\n      let seenComma = true;\n      let number = \"\",\n        exponent = \"\";\n      const result = [];\n      function throwSyntaxError(current2, i, partial) {\n        const error = new SyntaxError('Unexpected character \"' + current2 + '\" at index ' + i + \".\");\n        error.partial = partial;\n        throw error;\n      }\n      function newNumber() {\n        if (number !== \"\") {\n          if (exponent === \"\") result.push(Number(number));else result.push(Number(number) * Math.pow(10, Number(exponent)));\n        }\n        number = \"\";\n        exponent = \"\";\n      }\n      let current;\n      const length = input.length;\n      for (let i = 0; i < length; i++) {\n        current = input[i];\n        if (Array.isArray(flags) && flags.includes(result.length % stride) && RE.FLAGS.test(current)) {\n          state = INT;\n          number = current;\n          newNumber();\n          continue;\n        }\n        if (state === SEP) {\n          if (RE.WHITESPACE.test(current)) {\n            continue;\n          }\n          if (RE.DIGIT.test(current) || RE.SIGN.test(current)) {\n            state = INT;\n            number = current;\n            continue;\n          }\n          if (RE.POINT.test(current)) {\n            state = FLOAT;\n            number = current;\n            continue;\n          }\n          if (RE.COMMA.test(current)) {\n            if (seenComma) {\n              throwSyntaxError(current, i, result);\n            }\n            seenComma = true;\n          }\n        }\n        if (state === INT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n          if (RE.POINT.test(current)) {\n            number += current;\n            state = FLOAT;\n            continue;\n          }\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          }\n          if (RE.SIGN.test(current) && number.length === 1 && RE.SIGN.test(number[0])) {\n            throwSyntaxError(current, i, result);\n          }\n        }\n        if (state === FLOAT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          }\n          if (RE.POINT.test(current) && number[number.length - 1] === \".\") {\n            throwSyntaxError(current, i, result);\n          }\n        }\n        if (state === EXP) {\n          if (RE.DIGIT.test(current)) {\n            exponent += current;\n            continue;\n          }\n          if (RE.SIGN.test(current)) {\n            if (exponent === \"\") {\n              exponent += current;\n              continue;\n            }\n            if (exponent.length === 1 && RE.SIGN.test(exponent)) {\n              throwSyntaxError(current, i, result);\n            }\n          }\n        }\n        if (RE.WHITESPACE.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = false;\n        } else if (RE.COMMA.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = true;\n        } else if (RE.SIGN.test(current)) {\n          newNumber();\n          state = INT;\n          number = current;\n        } else if (RE.POINT.test(current)) {\n          newNumber();\n          state = FLOAT;\n          number = current;\n        } else {\n          throwSyntaxError(current, i, result);\n        }\n      }\n      newNumber();\n      return result;\n    }\n    const units = [\"mm\", \"cm\", \"in\", \"pt\", \"pc\", \"px\"];\n    const unitConversion = {\n      mm: {\n        mm: 1,\n        cm: 0.1,\n        in: 1 / 25.4,\n        pt: 72 / 25.4,\n        pc: 6 / 25.4,\n        px: -1\n      },\n      cm: {\n        mm: 10,\n        cm: 1,\n        in: 1 / 2.54,\n        pt: 72 / 2.54,\n        pc: 6 / 2.54,\n        px: -1\n      },\n      in: {\n        mm: 25.4,\n        cm: 2.54,\n        in: 1,\n        pt: 72,\n        pc: 6,\n        px: -1\n      },\n      pt: {\n        mm: 25.4 / 72,\n        cm: 2.54 / 72,\n        in: 1 / 72,\n        pt: 1,\n        pc: 6 / 72,\n        px: -1\n      },\n      pc: {\n        mm: 25.4 / 6,\n        cm: 2.54 / 6,\n        in: 1 / 6,\n        pt: 72 / 6,\n        pc: 1,\n        px: -1\n      },\n      px: {\n        px: 1\n      }\n    };\n    function parseFloatWithUnits(string) {\n      let theUnit = \"px\";\n      if (typeof string === \"string\" || string instanceof String) {\n        for (let i = 0, n = units.length; i < n; i++) {\n          const u = units[i];\n          if (string.endsWith(u)) {\n            theUnit = u;\n            string = string.substring(0, string.length - u.length);\n            break;\n          }\n        }\n      }\n      let scale = void 0;\n      if (theUnit === \"px\" && scope.defaultUnit !== \"px\") {\n        scale = unitConversion[\"in\"][scope.defaultUnit] / scope.defaultDPI;\n      } else {\n        scale = unitConversion[theUnit][scope.defaultUnit];\n        if (scale < 0) {\n          scale = unitConversion[theUnit][\"in\"] * scope.defaultDPI;\n        }\n      }\n      return scale * parseFloat(string);\n    }\n    function getNodeTransform(node) {\n      if (!(node.hasAttribute(\"transform\") || node.nodeName === \"use\" && (node.hasAttribute(\"x\") || node.hasAttribute(\"y\")))) {\n        return null;\n      }\n      const transform = parseNodeTransform(node);\n      if (transformStack.length > 0) {\n        transform.premultiply(transformStack[transformStack.length - 1]);\n      }\n      currentTransform.copy(transform);\n      transformStack.push(transform);\n      return transform;\n    }\n    function parseNodeTransform(node) {\n      const transform = new Matrix3();\n      const currentTransform2 = tempTransform0;\n      if (node.nodeName === \"use\" && (node.hasAttribute(\"x\") || node.hasAttribute(\"y\"))) {\n        const tx = parseFloatWithUnits(node.getAttribute(\"x\"));\n        const ty = parseFloatWithUnits(node.getAttribute(\"y\"));\n        transform.translate(tx, ty);\n      }\n      if (node.hasAttribute(\"transform\")) {\n        const transformsTexts = node.getAttribute(\"transform\").split(\")\");\n        for (let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n          const transformText = transformsTexts[tIndex].trim();\n          if (transformText === \"\") continue;\n          const openParPos = transformText.indexOf(\"(\");\n          const closeParPos = transformText.length;\n          if (openParPos > 0 && openParPos < closeParPos) {\n            const transformType = transformText.slice(0, openParPos);\n            const array = parseFloats(transformText.slice(openParPos + 1));\n            currentTransform2.identity();\n            switch (transformType) {\n              case \"translate\":\n                if (array.length >= 1) {\n                  const tx = array[0];\n                  let ty = 0;\n                  if (array.length >= 2) {\n                    ty = array[1];\n                  }\n                  currentTransform2.translate(tx, ty);\n                }\n                break;\n              case \"rotate\":\n                if (array.length >= 1) {\n                  let angle = 0;\n                  let cx = 0;\n                  let cy = 0;\n                  angle = array[0] * Math.PI / 180;\n                  if (array.length >= 3) {\n                    cx = array[1];\n                    cy = array[2];\n                  }\n                  tempTransform1.makeTranslation(-cx, -cy);\n                  tempTransform2.makeRotation(angle);\n                  tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                  tempTransform1.makeTranslation(cx, cy);\n                  currentTransform2.multiplyMatrices(tempTransform1, tempTransform3);\n                }\n                break;\n              case \"scale\":\n                if (array.length >= 1) {\n                  const scaleX = array[0];\n                  let scaleY = scaleX;\n                  if (array.length >= 2) {\n                    scaleY = array[1];\n                  }\n                  currentTransform2.scale(scaleX, scaleY);\n                }\n                break;\n              case \"skewX\":\n                if (array.length === 1) {\n                  currentTransform2.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                }\n                break;\n              case \"skewY\":\n                if (array.length === 1) {\n                  currentTransform2.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                }\n                break;\n              case \"matrix\":\n                if (array.length === 6) {\n                  currentTransform2.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                }\n                break;\n            }\n          }\n          transform.premultiply(currentTransform2);\n        }\n      }\n      return transform;\n    }\n    function transformPath(path, m) {\n      function transfVec2(v2) {\n        tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n        v2.set(tempV3.x, tempV3.y);\n      }\n      function transfEllipseGeneric(curve) {\n        const a = curve.xRadius;\n        const b = curve.yRadius;\n        const cosTheta = Math.cos(curve.aRotation);\n        const sinTheta = Math.sin(curve.aRotation);\n        const v1 = new Vector3(a * cosTheta, a * sinTheta, 0);\n        const v2 = new Vector3(-b * sinTheta, b * cosTheta, 0);\n        const f1 = v1.applyMatrix3(m);\n        const f2 = v2.applyMatrix3(m);\n        const mF = tempTransform0.set(f1.x, f2.x, 0, f1.y, f2.y, 0, 0, 0, 1);\n        const mFInv = tempTransform1.copy(mF).invert();\n        const mFInvT = tempTransform2.copy(mFInv).transpose();\n        const mQ = mFInvT.multiply(mFInv);\n        const mQe = mQ.elements;\n        const ed = eigenDecomposition(mQe[0], mQe[1], mQe[4]);\n        const rt1sqrt = Math.sqrt(ed.rt1);\n        const rt2sqrt = Math.sqrt(ed.rt2);\n        curve.xRadius = 1 / rt1sqrt;\n        curve.yRadius = 1 / rt2sqrt;\n        curve.aRotation = Math.atan2(ed.sn, ed.cs);\n        const isFullEllipse = (curve.aEndAngle - curve.aStartAngle) % (2 * Math.PI) < Number.EPSILON;\n        if (!isFullEllipse) {\n          const mDsqrt = tempTransform1.set(rt1sqrt, 0, 0, 0, rt2sqrt, 0, 0, 0, 1);\n          const mRT = tempTransform2.set(ed.cs, ed.sn, 0, -ed.sn, ed.cs, 0, 0, 0, 1);\n          const mDRF = mDsqrt.multiply(mRT).multiply(mF);\n          const transformAngle = phi => {\n            const {\n              x: cosR,\n              y: sinR\n            } = new Vector3(Math.cos(phi), Math.sin(phi), 0).applyMatrix3(mDRF);\n            return Math.atan2(sinR, cosR);\n          };\n          curve.aStartAngle = transformAngle(curve.aStartAngle);\n          curve.aEndAngle = transformAngle(curve.aEndAngle);\n          if (isTransformFlipped(m)) {\n            curve.aClockwise = !curve.aClockwise;\n          }\n        }\n      }\n      function transfEllipseNoSkew(curve) {\n        const sx = getTransformScaleX(m);\n        const sy = getTransformScaleY(m);\n        curve.xRadius *= sx;\n        curve.yRadius *= sy;\n        const theta = sx > Number.EPSILON ? Math.atan2(m.elements[1], m.elements[0]) : Math.atan2(-m.elements[3], m.elements[4]);\n        curve.aRotation += theta;\n        if (isTransformFlipped(m)) {\n          curve.aStartAngle *= -1;\n          curve.aEndAngle *= -1;\n          curve.aClockwise = !curve.aClockwise;\n        }\n      }\n      const subPaths = path.subPaths;\n      for (let i = 0, n = subPaths.length; i < n; i++) {\n        const subPath = subPaths[i];\n        const curves = subPath.curves;\n        for (let j = 0; j < curves.length; j++) {\n          const curve = curves[j];\n          if (curve.isLineCurve) {\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isCubicBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n            transfVec2(curve.v3);\n          } else if (curve.isQuadraticBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isEllipseCurve) {\n            tempV2.set(curve.aX, curve.aY);\n            transfVec2(tempV2);\n            curve.aX = tempV2.x;\n            curve.aY = tempV2.y;\n            if (isTransformSkewed(m)) {\n              transfEllipseGeneric(curve);\n            } else {\n              transfEllipseNoSkew(curve);\n            }\n          }\n        }\n      }\n    }\n    function isTransformFlipped(m) {\n      const te = m.elements;\n      return te[0] * te[4] - te[1] * te[3] < 0;\n    }\n    function isTransformSkewed(m) {\n      const te = m.elements;\n      const basisDot = te[0] * te[3] + te[1] * te[4];\n      if (basisDot === 0) return false;\n      const sx = getTransformScaleX(m);\n      const sy = getTransformScaleY(m);\n      return Math.abs(basisDot / (sx * sy)) > Number.EPSILON;\n    }\n    function getTransformScaleX(m) {\n      const te = m.elements;\n      return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n    }\n    function getTransformScaleY(m) {\n      const te = m.elements;\n      return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n    }\n    function eigenDecomposition(A, B, C) {\n      let rt1, rt2, cs, sn, t;\n      const sm = A + C;\n      const df = A - C;\n      const rt = Math.sqrt(df * df + 4 * B * B);\n      if (sm > 0) {\n        rt1 = 0.5 * (sm + rt);\n        t = 1 / rt1;\n        rt2 = A * t * C - B * t * B;\n      } else if (sm < 0) {\n        rt2 = 0.5 * (sm - rt);\n      } else {\n        rt1 = 0.5 * rt;\n        rt2 = -0.5 * rt;\n      }\n      if (df > 0) {\n        cs = df + rt;\n      } else {\n        cs = df - rt;\n      }\n      if (Math.abs(cs) > 2 * Math.abs(B)) {\n        t = -2 * B / cs;\n        sn = 1 / Math.sqrt(1 + t * t);\n        cs = t * sn;\n      } else if (Math.abs(B) === 0) {\n        cs = 1;\n        sn = 0;\n      } else {\n        t = -0.5 * cs / B;\n        cs = 1 / Math.sqrt(1 + t * t);\n        sn = t * cs;\n      }\n      if (df > 0) {\n        t = cs;\n        cs = -sn;\n        sn = t;\n      }\n      return {\n        rt1,\n        rt2,\n        cs,\n        sn\n      };\n    }\n    const paths = [];\n    const stylesheets = {};\n    const transformStack = [];\n    const tempTransform0 = new Matrix3();\n    const tempTransform1 = new Matrix3();\n    const tempTransform2 = new Matrix3();\n    const tempTransform3 = new Matrix3();\n    const tempV2 = new Vector2();\n    const tempV3 = new Vector3();\n    const currentTransform = new Matrix3();\n    const xml = new DOMParser().parseFromString(text, \"image/svg+xml\");\n    parseNode(xml.documentElement, {\n      fill: \"#000\",\n      fillOpacity: 1,\n      strokeOpacity: 1,\n      strokeWidth: 1,\n      strokeLineJoin: \"miter\",\n      strokeLineCap: \"butt\",\n      strokeMiterLimit: 4\n    });\n    const data = {\n      paths,\n      xml: xml.documentElement\n    };\n    return data;\n  }\n  static createShapes(shapePath) {\n    const BIGNUMBER = 999999999;\n    const IntersectionLocationType = {\n      ORIGIN: 0,\n      DESTINATION: 1,\n      BETWEEN: 2,\n      LEFT: 3,\n      RIGHT: 4,\n      BEHIND: 5,\n      BEYOND: 6\n    };\n    const classifyResult = {\n      loc: IntersectionLocationType.ORIGIN,\n      t: 0\n    };\n    function findEdgeIntersection(a0, a1, b0, b1) {\n      const x1 = a0.x;\n      const x2 = a1.x;\n      const x3 = b0.x;\n      const x4 = b1.x;\n      const y1 = a0.y;\n      const y2 = a1.y;\n      const y3 = b0.y;\n      const y4 = b1.y;\n      const nom1 = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n      const nom2 = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n      const denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n      const t1 = nom1 / denom;\n      const t2 = nom2 / denom;\n      if (denom === 0 && nom1 !== 0 || t1 <= 0 || t1 >= 1 || t2 < 0 || t2 > 1) {\n        return null;\n      } else if (nom1 === 0 && denom === 0) {\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          } else if (classifyResult.loc == IntersectionLocationType.BETWEEN) {\n            const x = +(x1 + classifyResult.t * (x2 - x1)).toPrecision(10);\n            const y = +(y1 + classifyResult.t * (y2 - y1)).toPrecision(10);\n            return {\n              x,\n              y,\n              t: classifyResult.t\n            };\n          }\n        }\n        return null;\n      } else {\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          }\n        }\n        const x = +(x1 + t1 * (x2 - x1)).toPrecision(10);\n        const y = +(y1 + t1 * (y2 - y1)).toPrecision(10);\n        return {\n          x,\n          y,\n          t: t1\n        };\n      }\n    }\n    function classifyPoint(p, edgeStart, edgeEnd) {\n      const ax = edgeEnd.x - edgeStart.x;\n      const ay = edgeEnd.y - edgeStart.y;\n      const bx = p.x - edgeStart.x;\n      const by = p.y - edgeStart.y;\n      const sa = ax * by - bx * ay;\n      if (p.x === edgeStart.x && p.y === edgeStart.y) {\n        classifyResult.loc = IntersectionLocationType.ORIGIN;\n        classifyResult.t = 0;\n        return;\n      }\n      if (p.x === edgeEnd.x && p.y === edgeEnd.y) {\n        classifyResult.loc = IntersectionLocationType.DESTINATION;\n        classifyResult.t = 1;\n        return;\n      }\n      if (sa < -Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.LEFT;\n        return;\n      }\n      if (sa > Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.RIGHT;\n        return;\n      }\n      if (ax * bx < 0 || ay * by < 0) {\n        classifyResult.loc = IntersectionLocationType.BEHIND;\n        return;\n      }\n      if (Math.sqrt(ax * ax + ay * ay) < Math.sqrt(bx * bx + by * by)) {\n        classifyResult.loc = IntersectionLocationType.BEYOND;\n        return;\n      }\n      let t;\n      if (ax !== 0) {\n        t = bx / ax;\n      } else {\n        t = by / ay;\n      }\n      classifyResult.loc = IntersectionLocationType.BETWEEN;\n      classifyResult.t = t;\n    }\n    function getIntersections(path1, path2) {\n      const intersectionsRaw = [];\n      const intersections = [];\n      for (let index = 1; index < path1.length; index++) {\n        const path1EdgeStart = path1[index - 1];\n        const path1EdgeEnd = path1[index];\n        for (let index2 = 1; index2 < path2.length; index2++) {\n          const path2EdgeStart = path2[index2 - 1];\n          const path2EdgeEnd = path2[index2];\n          const intersection = findEdgeIntersection(path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd);\n          if (intersection !== null && intersectionsRaw.find(i => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON) === void 0) {\n            intersectionsRaw.push(intersection);\n            intersections.push(new Vector2(intersection.x, intersection.y));\n          }\n        }\n      }\n      return intersections;\n    }\n    function getScanlineIntersections(scanline, boundingBox, paths) {\n      const center = new Vector2();\n      boundingBox.getCenter(center);\n      const allIntersections = [];\n      paths.forEach(path => {\n        if (path.boundingBox.containsPoint(center)) {\n          const intersections = getIntersections(scanline, path.points);\n          intersections.forEach(p => {\n            allIntersections.push({\n              identifier: path.identifier,\n              isCW: path.isCW,\n              point: p\n            });\n          });\n        }\n      });\n      allIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      return allIntersections;\n    }\n    function isHoleTo(simplePath, allPaths, scanlineMinX2, scanlineMaxX2, _fillRule) {\n      if (_fillRule === null || _fillRule === void 0 || _fillRule === \"\") {\n        _fillRule = \"nonzero\";\n      }\n      const centerBoundingBox = new Vector2();\n      simplePath.boundingBox.getCenter(centerBoundingBox);\n      const scanline = [new Vector2(scanlineMinX2, centerBoundingBox.y), new Vector2(scanlineMaxX2, centerBoundingBox.y)];\n      const scanlineIntersections = getScanlineIntersections(scanline, simplePath.boundingBox, allPaths);\n      scanlineIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      const baseIntersections = [];\n      const otherIntersections = [];\n      scanlineIntersections.forEach(i2 => {\n        if (i2.identifier === simplePath.identifier) {\n          baseIntersections.push(i2);\n        } else {\n          otherIntersections.push(i2);\n        }\n      });\n      const firstXOfPath = baseIntersections[0].point.x;\n      const stack = [];\n      let i = 0;\n      while (i < otherIntersections.length && otherIntersections[i].point.x < firstXOfPath) {\n        if (stack.length > 0 && stack[stack.length - 1] === otherIntersections[i].identifier) {\n          stack.pop();\n        } else {\n          stack.push(otherIntersections[i].identifier);\n        }\n        i++;\n      }\n      stack.push(simplePath.identifier);\n      if (_fillRule === \"evenodd\") {\n        const isHole = stack.length % 2 === 0 ? true : false;\n        const isHoleFor = stack[stack.length - 2];\n        return {\n          identifier: simplePath.identifier,\n          isHole,\n          for: isHoleFor\n        };\n      } else if (_fillRule === \"nonzero\") {\n        let isHole = true;\n        let isHoleFor = null;\n        let lastCWValue = null;\n        for (let i2 = 0; i2 < stack.length; i2++) {\n          const identifier = stack[i2];\n          if (isHole) {\n            lastCWValue = allPaths[identifier].isCW;\n            isHole = false;\n            isHoleFor = identifier;\n          } else if (lastCWValue !== allPaths[identifier].isCW) {\n            lastCWValue = allPaths[identifier].isCW;\n            isHole = true;\n          }\n        }\n        return {\n          identifier: simplePath.identifier,\n          isHole,\n          for: isHoleFor\n        };\n      } else {\n        console.warn('fill-rule: \"' + _fillRule + '\" is currently not implemented.');\n      }\n    }\n    let scanlineMinX = BIGNUMBER;\n    let scanlineMaxX = -BIGNUMBER;\n    let simplePaths = shapePath.subPaths.map(p => {\n      const points = p.getPoints();\n      let maxY = -BIGNUMBER;\n      let minY = BIGNUMBER;\n      let maxX = -BIGNUMBER;\n      let minX = BIGNUMBER;\n      for (let i = 0; i < points.length; i++) {\n        const p2 = points[i];\n        if (p2.y > maxY) {\n          maxY = p2.y;\n        }\n        if (p2.y < minY) {\n          minY = p2.y;\n        }\n        if (p2.x > maxX) {\n          maxX = p2.x;\n        }\n        if (p2.x < minX) {\n          minX = p2.x;\n        }\n      }\n      if (scanlineMaxX <= maxX) {\n        scanlineMaxX = maxX + 1;\n      }\n      if (scanlineMinX >= minX) {\n        scanlineMinX = minX - 1;\n      }\n      return {\n        curves: p.curves,\n        points,\n        isCW: ShapeUtils.isClockWise(points),\n        identifier: -1,\n        boundingBox: new Box2(new Vector2(minX, minY), new Vector2(maxX, maxY))\n      };\n    });\n    simplePaths = simplePaths.filter(sp => sp.points.length > 1);\n    for (let identifier = 0; identifier < simplePaths.length; identifier++) {\n      simplePaths[identifier].identifier = identifier;\n    }\n    const isAHole = simplePaths.map(p => isHoleTo(p, simplePaths, scanlineMinX, scanlineMaxX, shapePath.userData ? shapePath.userData.style.fillRule : void 0));\n    const shapesToReturn = [];\n    simplePaths.forEach(p => {\n      const amIAHole = isAHole[p.identifier];\n      if (!amIAHole.isHole) {\n        const shape = new Shape();\n        shape.curves = p.curves;\n        const holes = isAHole.filter(h => h.isHole && h.for === p.identifier);\n        holes.forEach(h => {\n          const hole = simplePaths[h.identifier];\n          const path = new Path();\n          path.curves = hole.curves;\n          shape.holes.push(path);\n        });\n        shapesToReturn.push(shape);\n      }\n    });\n    return shapesToReturn;\n  }\n  static getStrokeStyle(width, color, lineJoin, lineCap, miterLimit) {\n    width = width !== void 0 ? width : 1;\n    color = color !== void 0 ? color : \"#000\";\n    lineJoin = lineJoin !== void 0 ? lineJoin : \"miter\";\n    lineCap = lineCap !== void 0 ? lineCap : \"butt\";\n    miterLimit = miterLimit !== void 0 ? miterLimit : 4;\n    return {\n      strokeColor: color,\n      strokeWidth: width,\n      strokeLineJoin: lineJoin,\n      strokeLineCap: lineCap,\n      strokeMiterLimit: miterLimit\n    };\n  }\n  static pointsToStroke(points, style, arcDivisions, minDistance) {\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n      return null;\n    }\n    const geometry = new BufferGeometry();\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    return geometry;\n  }\n  static pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n    const tempV2_1 = new Vector2();\n    const tempV2_2 = new Vector2();\n    const tempV2_3 = new Vector2();\n    const tempV2_4 = new Vector2();\n    const tempV2_5 = new Vector2();\n    const tempV2_6 = new Vector2();\n    const tempV2_7 = new Vector2();\n    const lastPointL = new Vector2();\n    const lastPointR = new Vector2();\n    const point0L = new Vector2();\n    const point0R = new Vector2();\n    const currentPointL = new Vector2();\n    const currentPointR = new Vector2();\n    const nextPointL = new Vector2();\n    const nextPointR = new Vector2();\n    const innerPoint = new Vector2();\n    const outerPoint = new Vector2();\n    arcDivisions = arcDivisions !== void 0 ? arcDivisions : 12;\n    minDistance = minDistance !== void 0 ? minDistance : 1e-3;\n    vertexOffset = vertexOffset !== void 0 ? vertexOffset : 0;\n    points = removeDuplicatedPoints(points);\n    const numPoints = points.length;\n    if (numPoints < 2) return 0;\n    const isClosed = points[0].equals(points[numPoints - 1]);\n    let currentPoint;\n    let previousPoint = points[0];\n    let nextPoint;\n    const strokeWidth2 = style.strokeWidth / 2;\n    const deltaU = 1 / (numPoints - 1);\n    let u0 = 0,\n      u1;\n    let innerSideModified;\n    let joinIsOnLeftSide;\n    let isMiter;\n    let initialJoinIsOnLeftSide = false;\n    let numVertices = 0;\n    let currentCoordinate = vertexOffset * 3;\n    let currentCoordinateUV = vertexOffset * 2;\n    getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n    lastPointL.copy(points[0]).sub(tempV2_1);\n    lastPointR.copy(points[0]).add(tempV2_1);\n    point0L.copy(lastPointL);\n    point0R.copy(lastPointR);\n    for (let iPoint = 1; iPoint < numPoints; iPoint++) {\n      currentPoint = points[iPoint];\n      if (iPoint === numPoints - 1) {\n        if (isClosed) {\n          nextPoint = points[1];\n        } else nextPoint = void 0;\n      } else {\n        nextPoint = points[iPoint + 1];\n      }\n      const normal1 = tempV2_1;\n      getNormal(previousPoint, currentPoint, normal1);\n      tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n      currentPointL.copy(currentPoint).sub(tempV2_3);\n      currentPointR.copy(currentPoint).add(tempV2_3);\n      u1 = u0 + deltaU;\n      innerSideModified = false;\n      if (nextPoint !== void 0) {\n        getNormal(currentPoint, nextPoint, tempV2_2);\n        tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n        nextPointL.copy(currentPoint).sub(tempV2_3);\n        nextPointR.copy(currentPoint).add(tempV2_3);\n        joinIsOnLeftSide = true;\n        tempV2_3.subVectors(nextPoint, previousPoint);\n        if (normal1.dot(tempV2_3) < 0) {\n          joinIsOnLeftSide = false;\n        }\n        if (iPoint === 1) initialJoinIsOnLeftSide = joinIsOnLeftSide;\n        tempV2_3.subVectors(nextPoint, currentPoint);\n        tempV2_3.normalize();\n        const dot = Math.abs(normal1.dot(tempV2_3));\n        if (dot > Number.EPSILON) {\n          const miterSide = strokeWidth2 / dot;\n          tempV2_3.multiplyScalar(-miterSide);\n          tempV2_4.subVectors(currentPoint, previousPoint);\n          tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n          innerPoint.copy(tempV2_5).negate();\n          const miterLength2 = tempV2_5.length();\n          const segmentLengthPrev = tempV2_4.length();\n          tempV2_4.divideScalar(segmentLengthPrev);\n          tempV2_6.subVectors(nextPoint, currentPoint);\n          const segmentLengthNext = tempV2_6.length();\n          tempV2_6.divideScalar(segmentLengthNext);\n          if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n            innerSideModified = true;\n          }\n          outerPoint.copy(tempV2_5).add(currentPoint);\n          innerPoint.add(currentPoint);\n          isMiter = false;\n          if (innerSideModified) {\n            if (joinIsOnLeftSide) {\n              nextPointR.copy(innerPoint);\n              currentPointR.copy(innerPoint);\n            } else {\n              nextPointL.copy(innerPoint);\n              currentPointL.copy(innerPoint);\n            }\n          } else {\n            makeSegmentTriangles();\n          }\n          switch (style.strokeLineJoin) {\n            case \"bevel\":\n              makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n              break;\n            case \"round\":\n              createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n              if (joinIsOnLeftSide) {\n                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n              } else {\n                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n              }\n              break;\n            case \"miter\":\n            case \"miter-clip\":\n            default:\n              const miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n              if (miterFraction < 1) {\n                if (style.strokeLineJoin !== \"miter-clip\") {\n                  makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                  break;\n                } else {\n                  createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n                  if (joinIsOnLeftSide) {\n                    tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                    tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                    tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n              } else {\n                if (innerSideModified) {\n                  if (joinIsOnLeftSide) {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(innerPoint, u1, 1);\n                  } else {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(innerPoint, u1, 0);\n                    addVertex(outerPoint, u1, 1);\n                  }\n                  if (joinIsOnLeftSide) {\n                    nextPointL.copy(outerPoint);\n                  } else {\n                    nextPointR.copy(outerPoint);\n                  }\n                } else {\n                  if (joinIsOnLeftSide) {\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n                isMiter = true;\n              }\n              break;\n          }\n        } else {\n          makeSegmentTriangles();\n        }\n      } else {\n        makeSegmentTriangles();\n      }\n      if (!isClosed && iPoint === numPoints - 1) {\n        addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n      }\n      u0 = u1;\n      previousPoint = currentPoint;\n      lastPointL.copy(nextPointL);\n      lastPointR.copy(nextPointR);\n    }\n    if (!isClosed) {\n      addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n    } else if (innerSideModified && vertices) {\n      let lastOuter = outerPoint;\n      let lastInner = innerPoint;\n      if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n        lastOuter = innerPoint;\n        lastInner = outerPoint;\n      }\n      if (joinIsOnLeftSide) {\n        if (isMiter || initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 0 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n          if (isMiter) {\n            lastOuter.toArray(vertices, 1 * 3);\n          }\n        }\n      } else {\n        if (isMiter || !initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 1 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n          if (isMiter) {\n            lastOuter.toArray(vertices, 0 * 3);\n          }\n        }\n      }\n    }\n    return numVertices;\n    function getNormal(p1, p2, result) {\n      result.subVectors(p2, p1);\n      return result.set(-result.y, result.x).normalize();\n    }\n    function addVertex(position, u, v) {\n      if (vertices) {\n        vertices[currentCoordinate] = position.x;\n        vertices[currentCoordinate + 1] = position.y;\n        vertices[currentCoordinate + 2] = 0;\n        if (normals) {\n          normals[currentCoordinate] = 0;\n          normals[currentCoordinate + 1] = 0;\n          normals[currentCoordinate + 2] = 1;\n        }\n        currentCoordinate += 3;\n        if (uvs) {\n          uvs[currentCoordinateUV] = u;\n          uvs[currentCoordinateUV + 1] = v;\n          currentCoordinateUV += 2;\n        }\n      }\n      numVertices += 3;\n    }\n    function makeCircularSector(center, p1, p2, u, v) {\n      tempV2_1.copy(p1).sub(center).normalize();\n      tempV2_2.copy(p2).sub(center).normalize();\n      let angle = Math.PI;\n      const dot = tempV2_1.dot(tempV2_2);\n      if (Math.abs(dot) < 1) angle = Math.abs(Math.acos(dot));\n      angle /= arcDivisions;\n      tempV2_3.copy(p1);\n      for (let i = 0, il = arcDivisions - 1; i < il; i++) {\n        tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n        addVertex(tempV2_3, u, v);\n        addVertex(tempV2_4, u, v);\n        addVertex(center, u, 0.5);\n        tempV2_3.copy(tempV2_4);\n      }\n      addVertex(tempV2_4, u, v);\n      addVertex(p2, u, v);\n      addVertex(center, u, 0.5);\n    }\n    function makeSegmentTriangles() {\n      addVertex(lastPointR, u0, 1);\n      addVertex(lastPointL, u0, 0);\n      addVertex(currentPointL, u1, 0);\n      addVertex(lastPointR, u0, 1);\n      addVertex(currentPointL, u1, 0);\n      addVertex(currentPointR, u1, 1);\n    }\n    function makeSegmentWithBevelJoin(joinIsOnLeftSide2, innerSideModified2, u) {\n      if (innerSideModified2) {\n        if (joinIsOnLeftSide2) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u, 1);\n          addVertex(innerPoint, u, 0);\n          addVertex(nextPointR, u, 1);\n        }\n      } else {\n        if (joinIsOnLeftSide2) {\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        } else {\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        }\n      }\n    }\n    function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide2, innerSideModified2) {\n      if (innerSideModified2) {\n        if (joinIsOnLeftSide2) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u0, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(nextPointL, u0, 0);\n          addVertex(innerPoint, u1, 1);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u0, 1);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 0);\n          addVertex(nextPointR, u0, 1);\n        }\n      }\n    }\n    function addCapGeometry(center, p1, p2, joinIsOnLeftSide2, start, u) {\n      switch (style.strokeLineCap) {\n        case \"round\":\n          if (start) {\n            makeCircularSector(center, p2, p1, u, 0.5);\n          } else {\n            makeCircularSector(center, p1, p2, u, 0.5);\n          }\n          break;\n        case \"square\":\n          if (start) {\n            tempV2_1.subVectors(p1, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            if (joinIsOnLeftSide2) {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n              tempV2_4.toArray(vertices, 3 * 3);\n            } else {\n              tempV2_3.toArray(vertices, 1 * 3);\n              uvs[3 * 2 + 1] === 1 ? tempV2_4.toArray(vertices, 3 * 3) : tempV2_3.toArray(vertices, 3 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n            }\n          } else {\n            tempV2_1.subVectors(p2, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            const vl = vertices.length;\n            if (joinIsOnLeftSide2) {\n              tempV2_3.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            } else {\n              tempV2_4.toArray(vertices, vl - 2 * 3);\n              tempV2_3.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            }\n          }\n          break;\n      }\n    }\n    function removeDuplicatedPoints(points2) {\n      let dupPoints = false;\n      for (let i = 1, n = points2.length - 1; i < n; i++) {\n        if (points2[i].distanceTo(points2[i + 1]) < minDistance) {\n          dupPoints = true;\n          break;\n        }\n      }\n      if (!dupPoints) return points2;\n      const newPoints = [];\n      newPoints.push(points2[0]);\n      for (let i = 1, n = points2.length - 1; i < n; i++) {\n        if (points2[i].distanceTo(points2[i + 1]) >= minDistance) {\n          newPoints.push(points2[i]);\n        }\n      }\n      newPoints.push(points2[points2.length - 1]);\n      return newPoints;\n    }\n  }\n}\nexport { SVGLoader };","map":{"version":3,"names":["COLOR_SPACE_SVG","SVGLoader","Loader","constructor","manager","defaultDPI","defaultUnit","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","parseNode","node","style","nodeType","transform","getNodeTransform","isDefsNode","nodeName","parseStyle","parseCSSStylesheet","hasAttribute","parsePathNode","parseRectNode","parsePolygonNode","parsePolylineNode","parseCircleNode","parseEllipseNode","parseLineNode","href","getAttributeNS","usedNodeId","substring","usedNode","viewportElement","getElementById","warn","fill","color","setStyle","transformPath","currentTransform","paths","push","userData","childNodes","i","length","node2","transformStack","pop","copy","identity","ShapePath","point","Vector2","control","firstPoint","isFirstPoint","doSetFirstPoint","d","getAttribute","commands","match","l","command","type","charAt","data2","slice","trim","numbers","parseFloats","j","jl","x","y","moveTo","lineTo","bezierCurveTo","getReflection","quadraticCurveTo","rx","ry","start","clone","parseArcCommand","currentPath","autoClose","curves","currentPoint","sheet","cssRules","stylesheet","selectorList","selectorText","split","filter","Boolean","map","i2","definitions","Object","fromEntries","entries","_ref","v","stylesheets","assign","x_axis_rotation","large_arc_flag","sweep_flag","end","Math","PI","abs","dx2","dy2","x1p","cos","sin","y1p","rxs","rys","x1ps","y1ps","cr","s","sqrt","dq","pq","q","max","cxp","cyp","cx","cy","theta","svgAngle","delta","absellipse","ux","uy","vx","vy","dot","len","ang","acos","min","parseFloatWithUnits","w","h","bci","iterator","a","b","index","regex","replace","r","subpath","Path","absarc","subPaths","x1","y1","x2","y2","stylesheetStyles","classSelectors","addStyle","svgName","jsName","adjustFunction","startsWith","clamp","positive","input","flags","stride","TypeError","RE","SEPARATOR","WHITESPACE","DIGIT","SIGN","POINT","COMMA","EXP","FLAGS","SEP","INT","FLOAT","state","seenComma","number","exponent","result","throwSyntaxError","current2","partial","SyntaxError","newNumber","Number","pow","current","Array","isArray","includes","test","units","unitConversion","mm","cm","in","pt","pc","px","string","theUnit","String","n","u","endsWith","scale","parseFloat","parseNodeTransform","premultiply","Matrix3","currentTransform2","tempTransform0","tx","ty","translate","transformsTexts","tIndex","transformText","openParPos","indexOf","closeParPos","transformType","array","angle","tempTransform1","makeTranslation","tempTransform2","makeRotation","tempTransform3","multiplyMatrices","scaleX","scaleY","set","tan","m","transfVec2","v2","tempV3","applyMatrix3","transfEllipseGeneric","curve","xRadius","yRadius","cosTheta","aRotation","sinTheta","v1","Vector3","f1","f2","mF","mFInv","invert","mFInvT","transpose","mQ","multiply","mQe","elements","ed","eigenDecomposition","rt1sqrt","rt1","rt2sqrt","rt2","atan2","sn","cs","isFullEllipse","aEndAngle","aStartAngle","EPSILON","mDsqrt","mRT","mDRF","transformAngle","phi","cosR","sinR","isTransformFlipped","aClockwise","transfEllipseNoSkew","sx","getTransformScaleX","sy","getTransformScaleY","subPath","isLineCurve","isCubicBezierCurve","v0","v3","isQuadraticBezierCurve","isEllipseCurve","tempV2","aX","aY","isTransformSkewed","te","basisDot","A","B","C","t","sm","df","rt","xml","DOMParser","parseFromString","documentElement","fillOpacity","strokeOpacity","strokeWidth","strokeLineJoin","strokeLineCap","strokeMiterLimit","data","createShapes","shapePath","BIGNUMBER","IntersectionLocationType","ORIGIN","DESTINATION","BETWEEN","LEFT","RIGHT","BEHIND","BEYOND","classifyResult","loc","findEdgeIntersection","a0","a1","b0","b1","x3","x4","y3","y4","nom1","nom2","denom","t1","t2","classifyPoint","toPrecision","p","edgeStart","edgeEnd","ax","ay","bx","by","sa","getIntersections","path1","path2","intersectionsRaw","intersections","path1EdgeStart","path1EdgeEnd","index2","path2EdgeStart","path2EdgeEnd","intersection","find","getScanlineIntersections","scanline","boundingBox","center","getCenter","allIntersections","forEach","containsPoint","points","identifier","isCW","sort","i1","isHoleTo","simplePath","allPaths","scanlineMinX2","scanlineMaxX2","_fillRule","centerBoundingBox","scanlineIntersections","baseIntersections","otherIntersections","firstXOfPath","stack","isHole","isHoleFor","for","lastCWValue","scanlineMinX","scanlineMaxX","simplePaths","getPoints","maxY","minY","maxX","minX","p2","ShapeUtils","isClockWise","Box2","sp","isAHole","fillRule","shapesToReturn","amIAHole","shape","Shape","holes","hole","getStrokeStyle","width","lineJoin","lineCap","miterLimit","strokeColor","pointsToStroke","arcDivisions","minDistance","vertices","normals","uvs","pointsToStrokeWithBuffers","geometry","BufferGeometry","setAttribute","Float32BufferAttribute","vertexOffset","tempV2_1","tempV2_2","tempV2_3","tempV2_4","tempV2_5","tempV2_6","tempV2_7","lastPointL","lastPointR","point0L","point0R","currentPointL","currentPointR","nextPointL","nextPointR","innerPoint","outerPoint","removeDuplicatedPoints","numPoints","isClosed","equals","previousPoint","nextPoint","strokeWidth2","deltaU","u0","u1","innerSideModified","joinIsOnLeftSide","isMiter","initialJoinIsOnLeftSide","numVertices","currentCoordinate","currentCoordinateUV","getNormal","multiplyScalar","sub","add","iPoint","normal1","subVectors","normalize","miterSide","setLength","negate","miterLength2","segmentLengthPrev","divideScalar","segmentLengthNext","makeSegmentTriangles","makeSegmentWithBevelJoin","createSegmentTrianglesWithMiddleSection","makeCircularSector","miterFraction","addVertex","addCapGeometry","lastOuter","lastInner","toArray","p1","position","il","rotateAround","joinIsOnLeftSide2","innerSideModified2","addVectors","vl","points2","dupPoints","distanceTo","newPoints"],"sources":["/Users/timothycharouk/Documents/my-app/node_modules/src/loaders/SVGLoader.js"],"sourcesContent":["import {\n  Box2,\n  BufferGeometry,\n  FileLoader,\n  Float32BufferAttribute,\n  Loader,\n  Matrix3,\n  Path,\n  Shape,\n  ShapePath,\n  ShapeUtils,\n  Vector2,\n  Vector3,\n} from 'three'\n\nconst COLOR_SPACE_SVG = 'srgb'\n\nclass SVGLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n\n    // Default dots per inch\n    this.defaultDPI = 90\n\n    // Accepted units: 'mm', 'cm', 'in', 'pt', 'pc', 'px'\n    this.defaultUnit = 'px'\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    const loader = new FileLoader(scope.manager)\n    loader.setPath(scope.path)\n    loader.setRequestHeader(scope.requestHeader)\n    loader.setWithCredentials(scope.withCredentials)\n    loader.load(\n      url,\n      function (text) {\n        try {\n          onLoad(scope.parse(text))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  parse(text) {\n    const scope = this\n\n    function parseNode(node, style) {\n      if (node.nodeType !== 1) return\n\n      const transform = getNodeTransform(node)\n\n      let isDefsNode = false\n\n      let path = null\n\n      switch (node.nodeName) {\n        case 'svg':\n          style = parseStyle(node, style)\n          break\n\n        case 'style':\n          parseCSSStylesheet(node)\n          break\n\n        case 'g':\n          style = parseStyle(node, style)\n          break\n\n        case 'path':\n          style = parseStyle(node, style)\n          if (node.hasAttribute('d')) path = parsePathNode(node)\n          break\n\n        case 'rect':\n          style = parseStyle(node, style)\n          path = parseRectNode(node)\n          break\n\n        case 'polygon':\n          style = parseStyle(node, style)\n          path = parsePolygonNode(node)\n          break\n\n        case 'polyline':\n          style = parseStyle(node, style)\n          path = parsePolylineNode(node)\n          break\n\n        case 'circle':\n          style = parseStyle(node, style)\n          path = parseCircleNode(node)\n          break\n\n        case 'ellipse':\n          style = parseStyle(node, style)\n          path = parseEllipseNode(node)\n          break\n\n        case 'line':\n          style = parseStyle(node, style)\n          path = parseLineNode(node)\n          break\n\n        case 'defs':\n          isDefsNode = true\n          break\n\n        case 'use':\n          style = parseStyle(node, style)\n\n          const href = node.getAttributeNS('http://www.w3.org/1999/xlink', 'href') || ''\n          const usedNodeId = href.substring(1)\n          const usedNode = node.viewportElement.getElementById(usedNodeId)\n          if (usedNode) {\n            parseNode(usedNode, style)\n          } else {\n            console.warn(\"SVGLoader: 'use node' references non-existent node id: \" + usedNodeId)\n          }\n\n          break\n\n        default:\n        // console.log( node );\n      }\n\n      if (path) {\n        if (style.fill !== undefined && style.fill !== 'none') {\n          path.color.setStyle(style.fill, COLOR_SPACE_SVG)\n        }\n\n        transformPath(path, currentTransform)\n\n        paths.push(path)\n\n        path.userData = { node: node, style: style }\n      }\n\n      const childNodes = node.childNodes\n\n      for (let i = 0; i < childNodes.length; i++) {\n        const node = childNodes[i]\n\n        if (isDefsNode && node.nodeName !== 'style' && node.nodeName !== 'defs') {\n          // Ignore everything in defs except CSS style definitions\n          // and nested defs, because it is OK by the standard to have\n          // <style/> there.\n          continue\n        }\n\n        parseNode(node, style)\n      }\n\n      if (transform) {\n        transformStack.pop()\n\n        if (transformStack.length > 0) {\n          currentTransform.copy(transformStack[transformStack.length - 1])\n        } else {\n          currentTransform.identity()\n        }\n      }\n    }\n\n    function parsePathNode(node) {\n      const path = new ShapePath()\n\n      const point = new Vector2()\n      const control = new Vector2()\n\n      const firstPoint = new Vector2()\n      let isFirstPoint = true\n      let doSetFirstPoint = false\n\n      const d = node.getAttribute('d')\n\n      if (d === '' || d === 'none') return null\n\n      // console.log( d );\n\n      const commands = d.match(/[a-df-z][^a-df-z]*/gi)\n\n      for (let i = 0, l = commands.length; i < l; i++) {\n        const command = commands[i]\n\n        const type = command.charAt(0)\n        const data = command.slice(1).trim()\n\n        if (isFirstPoint === true) {\n          doSetFirstPoint = true\n          isFirstPoint = false\n        }\n\n        let numbers\n\n        switch (type) {\n          case 'M':\n            numbers = parseFloats(data)\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0]\n              point.y = numbers[j + 1]\n              control.x = point.x\n              control.y = point.y\n\n              if (j === 0) {\n                path.moveTo(point.x, point.y)\n              } else {\n                path.lineTo(point.x, point.y)\n              }\n\n              if (j === 0) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'H':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x = numbers[j]\n              control.x = point.x\n              control.y = point.y\n              path.lineTo(point.x, point.y)\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'V':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y = numbers[j]\n              control.x = point.x\n              control.y = point.y\n              path.lineTo(point.x, point.y)\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'L':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0]\n              point.y = numbers[j + 1]\n              control.x = point.x\n              control.y = point.y\n              path.lineTo(point.x, point.y)\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'C':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(\n                numbers[j + 0],\n                numbers[j + 1],\n                numbers[j + 2],\n                numbers[j + 3],\n                numbers[j + 4],\n                numbers[j + 5],\n              )\n              control.x = numbers[j + 2]\n              control.y = numbers[j + 3]\n              point.x = numbers[j + 4]\n              point.y = numbers[j + 5]\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'S':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(\n                getReflection(point.x, control.x),\n                getReflection(point.y, control.y),\n                numbers[j + 0],\n                numbers[j + 1],\n                numbers[j + 2],\n                numbers[j + 3],\n              )\n              control.x = numbers[j + 0]\n              control.y = numbers[j + 1]\n              point.x = numbers[j + 2]\n              point.y = numbers[j + 3]\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'Q':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3])\n              control.x = numbers[j + 0]\n              control.y = numbers[j + 1]\n              point.x = numbers[j + 2]\n              point.y = numbers[j + 3]\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'T':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x)\n              const ry = getReflection(point.y, control.y)\n              path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1])\n              control.x = rx\n              control.y = ry\n              point.x = numbers[j + 0]\n              point.y = numbers[j + 1]\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'A':\n            numbers = parseFloats(data, [3, 4], 7)\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              // skip command if start point == end point\n              if (numbers[j + 5] == point.x && numbers[j + 6] == point.y) continue\n\n              const start = point.clone()\n              point.x = numbers[j + 5]\n              point.y = numbers[j + 6]\n              control.x = point.x\n              control.y = point.y\n              parseArcCommand(\n                path,\n                numbers[j],\n                numbers[j + 1],\n                numbers[j + 2],\n                numbers[j + 3],\n                numbers[j + 4],\n                start,\n                point,\n              )\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'm':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0]\n              point.y += numbers[j + 1]\n              control.x = point.x\n              control.y = point.y\n\n              if (j === 0) {\n                path.moveTo(point.x, point.y)\n              } else {\n                path.lineTo(point.x, point.y)\n              }\n\n              if (j === 0) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'h':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x += numbers[j]\n              control.x = point.x\n              control.y = point.y\n              path.lineTo(point.x, point.y)\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'v':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y += numbers[j]\n              control.x = point.x\n              control.y = point.y\n              path.lineTo(point.x, point.y)\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'l':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0]\n              point.y += numbers[j + 1]\n              control.x = point.x\n              control.y = point.y\n              path.lineTo(point.x, point.y)\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'c':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(\n                point.x + numbers[j + 0],\n                point.y + numbers[j + 1],\n                point.x + numbers[j + 2],\n                point.y + numbers[j + 3],\n                point.x + numbers[j + 4],\n                point.y + numbers[j + 5],\n              )\n              control.x = point.x + numbers[j + 2]\n              control.y = point.y + numbers[j + 3]\n              point.x += numbers[j + 4]\n              point.y += numbers[j + 5]\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 's':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(\n                getReflection(point.x, control.x),\n                getReflection(point.y, control.y),\n                point.x + numbers[j + 0],\n                point.y + numbers[j + 1],\n                point.x + numbers[j + 2],\n                point.y + numbers[j + 3],\n              )\n              control.x = point.x + numbers[j + 0]\n              control.y = point.y + numbers[j + 1]\n              point.x += numbers[j + 2]\n              point.y += numbers[j + 3]\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'q':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(\n                point.x + numbers[j + 0],\n                point.y + numbers[j + 1],\n                point.x + numbers[j + 2],\n                point.y + numbers[j + 3],\n              )\n              control.x = point.x + numbers[j + 0]\n              control.y = point.y + numbers[j + 1]\n              point.x += numbers[j + 2]\n              point.y += numbers[j + 3]\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 't':\n            numbers = parseFloats(data)\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x)\n              const ry = getReflection(point.y, control.y)\n              path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1])\n              control.x = rx\n              control.y = ry\n              point.x = point.x + numbers[j + 0]\n              point.y = point.y + numbers[j + 1]\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'a':\n            numbers = parseFloats(data, [3, 4], 7)\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              // skip command if no displacement\n              if (numbers[j + 5] == 0 && numbers[j + 6] == 0) continue\n\n              const start = point.clone()\n              point.x += numbers[j + 5]\n              point.y += numbers[j + 6]\n              control.x = point.x\n              control.y = point.y\n              parseArcCommand(\n                path,\n                numbers[j],\n                numbers[j + 1],\n                numbers[j + 2],\n                numbers[j + 3],\n                numbers[j + 4],\n                start,\n                point,\n              )\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point)\n            }\n\n            break\n\n          case 'Z':\n          case 'z':\n            path.currentPath.autoClose = true\n\n            if (path.currentPath.curves.length > 0) {\n              // Reset point to beginning of Path\n              point.copy(firstPoint)\n              path.currentPath.currentPoint.copy(point)\n              isFirstPoint = true\n            }\n\n            break\n\n          default:\n            console.warn(command)\n        }\n\n        // console.log( type, parseFloats( data ), parseFloats( data ).length  )\n\n        doSetFirstPoint = false\n      }\n\n      return path\n    }\n\n    function parseCSSStylesheet(node) {\n      if (!node.sheet || !node.sheet.cssRules || !node.sheet.cssRules.length) return\n\n      for (let i = 0; i < node.sheet.cssRules.length; i++) {\n        const stylesheet = node.sheet.cssRules[i]\n\n        if (stylesheet.type !== 1) continue\n\n        const selectorList = stylesheet.selectorText\n          .split(/,/gm)\n          .filter(Boolean)\n          .map((i) => i.trim())\n\n        for (let j = 0; j < selectorList.length; j++) {\n          // Remove empty rules\n          const definitions = Object.fromEntries(Object.entries(stylesheet.style).filter(([, v]) => v !== ''))\n\n          stylesheets[selectorList[j]] = Object.assign(stylesheets[selectorList[j]] || {}, definitions)\n        }\n      }\n    }\n\n    /**\n     * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n     * https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/ Appendix: Endpoint to center arc conversion\n     * From\n     * rx ry x-axis-rotation large-arc-flag sweep-flag x y\n     * To\n     * aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation\n     */\n\n    function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n      if (rx == 0 || ry == 0) {\n        // draw a line if either of the radii == 0\n        path.lineTo(end.x, end.y)\n        return\n      }\n\n      x_axis_rotation = (x_axis_rotation * Math.PI) / 180\n\n      // Ensure radii are positive\n      rx = Math.abs(rx)\n      ry = Math.abs(ry)\n\n      // Compute (x1', y1')\n      const dx2 = (start.x - end.x) / 2.0\n      const dy2 = (start.y - end.y) / 2.0\n      const x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2\n      const y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2\n\n      // Compute (cx', cy')\n      let rxs = rx * rx\n      let rys = ry * ry\n      const x1ps = x1p * x1p\n      const y1ps = y1p * y1p\n\n      // Ensure radii are large enough\n      const cr = x1ps / rxs + y1ps / rys\n\n      if (cr > 1) {\n        // scale up rx,ry equally so cr == 1\n        const s = Math.sqrt(cr)\n        rx = s * rx\n        ry = s * ry\n        rxs = rx * rx\n        rys = ry * ry\n      }\n\n      const dq = rxs * y1ps + rys * x1ps\n      const pq = (rxs * rys - dq) / dq\n      let q = Math.sqrt(Math.max(0, pq))\n      if (large_arc_flag === sweep_flag) q = -q\n      const cxp = (q * rx * y1p) / ry\n      const cyp = (-q * ry * x1p) / rx\n\n      // Step 3: Compute (cx, cy) from (cx', cy')\n      const cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2\n      const cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2\n\n      // Step 4: Compute θ1 and Δθ\n      const theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry)\n      const delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2)\n\n      path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation)\n    }\n\n    function svgAngle(ux, uy, vx, vy) {\n      const dot = ux * vx + uy * vy\n      const len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy)\n      let ang = Math.acos(Math.max(-1, Math.min(1, dot / len))) // floating point precision, slightly over values appear\n      if (ux * vy - uy * vx < 0) ang = -ang\n      return ang\n    }\n\n    /*\n     * According to https://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute\n     * rounded corner should be rendered to elliptical arc, but bezier curve does the job well enough\n     */\n    function parseRectNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('x') || 0)\n      const y = parseFloatWithUnits(node.getAttribute('y') || 0)\n      const rx = parseFloatWithUnits(node.getAttribute('rx') || node.getAttribute('ry') || 0)\n      const ry = parseFloatWithUnits(node.getAttribute('ry') || node.getAttribute('rx') || 0)\n      const w = parseFloatWithUnits(node.getAttribute('width'))\n      const h = parseFloatWithUnits(node.getAttribute('height'))\n\n      // Ellipse arc to Bezier approximation Coefficient (Inversed). See:\n      // https://spencermortensen.com/articles/bezier-circle/\n      const bci = 1 - 0.551915024494\n\n      const path = new ShapePath()\n\n      // top left\n      path.moveTo(x + rx, y)\n\n      // top right\n      path.lineTo(x + w - rx, y)\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w - rx * bci, y, x + w, y + ry * bci, x + w, y + ry)\n      }\n\n      // bottom right\n      path.lineTo(x + w, y + h - ry)\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w, y + h - ry * bci, x + w - rx * bci, y + h, x + w - rx, y + h)\n      }\n\n      // bottom left\n      path.lineTo(x + rx, y + h)\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + rx * bci, y + h, x, y + h - ry * bci, x, y + h - ry)\n      }\n\n      // back to top left\n      path.lineTo(x, y + ry)\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x, y + ry * bci, x + rx * bci, y, x + rx, y)\n      }\n\n      return path\n    }\n\n    function parsePolygonNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a)\n        const y = parseFloatWithUnits(b)\n\n        if (index === 0) {\n          path.moveTo(x, y)\n        } else {\n          path.lineTo(x, y)\n        }\n\n        index++\n      }\n\n      const regex = /([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)(?:,|\\s)([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)/g\n\n      const path = new ShapePath()\n\n      let index = 0\n\n      node.getAttribute('points').replace(regex, iterator)\n\n      path.currentPath.autoClose = true\n\n      return path\n    }\n\n    function parsePolylineNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a)\n        const y = parseFloatWithUnits(b)\n\n        if (index === 0) {\n          path.moveTo(x, y)\n        } else {\n          path.lineTo(x, y)\n        }\n\n        index++\n      }\n\n      const regex = /([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)(?:,|\\s)([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)/g\n\n      const path = new ShapePath()\n\n      let index = 0\n\n      node.getAttribute('points').replace(regex, iterator)\n\n      path.currentPath.autoClose = false\n\n      return path\n    }\n\n    function parseCircleNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('cx') || 0)\n      const y = parseFloatWithUnits(node.getAttribute('cy') || 0)\n      const r = parseFloatWithUnits(node.getAttribute('r') || 0)\n\n      const subpath = new Path()\n      subpath.absarc(x, y, r, 0, Math.PI * 2)\n\n      const path = new ShapePath()\n      path.subPaths.push(subpath)\n\n      return path\n    }\n\n    function parseEllipseNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('cx') || 0)\n      const y = parseFloatWithUnits(node.getAttribute('cy') || 0)\n      const rx = parseFloatWithUnits(node.getAttribute('rx') || 0)\n      const ry = parseFloatWithUnits(node.getAttribute('ry') || 0)\n\n      const subpath = new Path()\n      subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2)\n\n      const path = new ShapePath()\n      path.subPaths.push(subpath)\n\n      return path\n    }\n\n    function parseLineNode(node) {\n      const x1 = parseFloatWithUnits(node.getAttribute('x1') || 0)\n      const y1 = parseFloatWithUnits(node.getAttribute('y1') || 0)\n      const x2 = parseFloatWithUnits(node.getAttribute('x2') || 0)\n      const y2 = parseFloatWithUnits(node.getAttribute('y2') || 0)\n\n      const path = new ShapePath()\n      path.moveTo(x1, y1)\n      path.lineTo(x2, y2)\n      path.currentPath.autoClose = false\n\n      return path\n    }\n\n    //\n\n    function parseStyle(node, style) {\n      style = Object.assign({}, style) // clone style\n\n      let stylesheetStyles = {}\n\n      if (node.hasAttribute('class')) {\n        const classSelectors = node\n          .getAttribute('class')\n          .split(/\\s/)\n          .filter(Boolean)\n          .map((i) => i.trim())\n\n        for (let i = 0; i < classSelectors.length; i++) {\n          stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['.' + classSelectors[i]])\n        }\n      }\n\n      if (node.hasAttribute('id')) {\n        stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['#' + node.getAttribute('id')])\n      }\n\n      function addStyle(svgName, jsName, adjustFunction) {\n        if (adjustFunction === undefined)\n          adjustFunction = function copy(v) {\n            if (v.startsWith('url')) console.warn('SVGLoader: url access in attributes is not implemented.')\n\n            return v\n          }\n\n        if (node.hasAttribute(svgName)) style[jsName] = adjustFunction(node.getAttribute(svgName))\n        if (stylesheetStyles[svgName]) style[jsName] = adjustFunction(stylesheetStyles[svgName])\n        if (node.style && node.style[svgName] !== '') style[jsName] = adjustFunction(node.style[svgName])\n      }\n\n      function clamp(v) {\n        return Math.max(0, Math.min(1, parseFloatWithUnits(v)))\n      }\n\n      function positive(v) {\n        return Math.max(0, parseFloatWithUnits(v))\n      }\n\n      addStyle('fill', 'fill')\n      addStyle('fill-opacity', 'fillOpacity', clamp)\n      addStyle('fill-rule', 'fillRule')\n      addStyle('opacity', 'opacity', clamp)\n      addStyle('stroke', 'stroke')\n      addStyle('stroke-opacity', 'strokeOpacity', clamp)\n      addStyle('stroke-width', 'strokeWidth', positive)\n      addStyle('stroke-linejoin', 'strokeLineJoin')\n      addStyle('stroke-linecap', 'strokeLineCap')\n      addStyle('stroke-miterlimit', 'strokeMiterLimit', positive)\n      addStyle('visibility', 'visibility')\n\n      return style\n    }\n\n    // http://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes\n\n    function getReflection(a, b) {\n      return a - (b - a)\n    }\n\n    // from https://github.com/ppvg/svg-numbers (MIT License)\n\n    function parseFloats(input, flags, stride) {\n      if (typeof input !== 'string') {\n        throw new TypeError('Invalid input: ' + typeof input)\n      }\n\n      // Character groups\n      const RE = {\n        SEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n        WHITESPACE: /[ \\t\\r\\n]/,\n        DIGIT: /[\\d]/,\n        SIGN: /[-+]/,\n        POINT: /\\./,\n        COMMA: /,/,\n        EXP: /e/i,\n        FLAGS: /[01]/,\n      }\n\n      // States\n      const SEP = 0\n      const INT = 1\n      const FLOAT = 2\n      const EXP = 3\n\n      let state = SEP\n      let seenComma = true\n      let number = '',\n        exponent = ''\n      const result = []\n\n      function throwSyntaxError(current, i, partial) {\n        const error = new SyntaxError('Unexpected character \"' + current + '\" at index ' + i + '.')\n        error.partial = partial\n        throw error\n      }\n\n      function newNumber() {\n        if (number !== '') {\n          if (exponent === '') result.push(Number(number))\n          else result.push(Number(number) * Math.pow(10, Number(exponent)))\n        }\n\n        number = ''\n        exponent = ''\n      }\n\n      let current\n      const length = input.length\n\n      for (let i = 0; i < length; i++) {\n        current = input[i]\n\n        // check for flags\n        if (Array.isArray(flags) && flags.includes(result.length % stride) && RE.FLAGS.test(current)) {\n          state = INT\n          number = current\n          newNumber()\n          continue\n        }\n\n        // parse until next number\n        if (state === SEP) {\n          // eat whitespace\n          if (RE.WHITESPACE.test(current)) {\n            continue\n          }\n\n          // start new number\n          if (RE.DIGIT.test(current) || RE.SIGN.test(current)) {\n            state = INT\n            number = current\n            continue\n          }\n\n          if (RE.POINT.test(current)) {\n            state = FLOAT\n            number = current\n            continue\n          }\n\n          // throw on double commas (e.g. \"1, , 2\")\n          if (RE.COMMA.test(current)) {\n            if (seenComma) {\n              throwSyntaxError(current, i, result)\n            }\n\n            seenComma = true\n          }\n        }\n\n        // parse integer part\n        if (state === INT) {\n          if (RE.DIGIT.test(current)) {\n            number += current\n            continue\n          }\n\n          if (RE.POINT.test(current)) {\n            number += current\n            state = FLOAT\n            continue\n          }\n\n          if (RE.EXP.test(current)) {\n            state = EXP\n            continue\n          }\n\n          // throw on double signs (\"-+1\"), but not on sign as separator (\"-1-2\")\n          if (RE.SIGN.test(current) && number.length === 1 && RE.SIGN.test(number[0])) {\n            throwSyntaxError(current, i, result)\n          }\n        }\n\n        // parse decimal part\n        if (state === FLOAT) {\n          if (RE.DIGIT.test(current)) {\n            number += current\n            continue\n          }\n\n          if (RE.EXP.test(current)) {\n            state = EXP\n            continue\n          }\n\n          // throw on double decimal points (e.g. \"1..2\")\n          if (RE.POINT.test(current) && number[number.length - 1] === '.') {\n            throwSyntaxError(current, i, result)\n          }\n        }\n\n        // parse exponent part\n        if (state === EXP) {\n          if (RE.DIGIT.test(current)) {\n            exponent += current\n            continue\n          }\n\n          if (RE.SIGN.test(current)) {\n            if (exponent === '') {\n              exponent += current\n              continue\n            }\n\n            if (exponent.length === 1 && RE.SIGN.test(exponent)) {\n              throwSyntaxError(current, i, result)\n            }\n          }\n        }\n\n        // end of number\n        if (RE.WHITESPACE.test(current)) {\n          newNumber()\n          state = SEP\n          seenComma = false\n        } else if (RE.COMMA.test(current)) {\n          newNumber()\n          state = SEP\n          seenComma = true\n        } else if (RE.SIGN.test(current)) {\n          newNumber()\n          state = INT\n          number = current\n        } else if (RE.POINT.test(current)) {\n          newNumber()\n          state = FLOAT\n          number = current\n        } else {\n          throwSyntaxError(current, i, result)\n        }\n      }\n\n      // add the last number found (if any)\n      newNumber()\n\n      return result\n    }\n\n    // Units\n\n    const units = ['mm', 'cm', 'in', 'pt', 'pc', 'px']\n\n    // Conversion: [ fromUnit ][ toUnit ] (-1 means dpi dependent)\n    const unitConversion = {\n      mm: {\n        mm: 1,\n        cm: 0.1,\n        in: 1 / 25.4,\n        pt: 72 / 25.4,\n        pc: 6 / 25.4,\n        px: -1,\n      },\n      cm: {\n        mm: 10,\n        cm: 1,\n        in: 1 / 2.54,\n        pt: 72 / 2.54,\n        pc: 6 / 2.54,\n        px: -1,\n      },\n      in: {\n        mm: 25.4,\n        cm: 2.54,\n        in: 1,\n        pt: 72,\n        pc: 6,\n        px: -1,\n      },\n      pt: {\n        mm: 25.4 / 72,\n        cm: 2.54 / 72,\n        in: 1 / 72,\n        pt: 1,\n        pc: 6 / 72,\n        px: -1,\n      },\n      pc: {\n        mm: 25.4 / 6,\n        cm: 2.54 / 6,\n        in: 1 / 6,\n        pt: 72 / 6,\n        pc: 1,\n        px: -1,\n      },\n      px: {\n        px: 1,\n      },\n    }\n\n    function parseFloatWithUnits(string) {\n      let theUnit = 'px'\n\n      if (typeof string === 'string' || string instanceof String) {\n        for (let i = 0, n = units.length; i < n; i++) {\n          const u = units[i]\n\n          if (string.endsWith(u)) {\n            theUnit = u\n            string = string.substring(0, string.length - u.length)\n            break\n          }\n        }\n      }\n\n      let scale = undefined\n\n      if (theUnit === 'px' && scope.defaultUnit !== 'px') {\n        // Conversion scale from  pixels to inches, then to default units\n\n        scale = unitConversion['in'][scope.defaultUnit] / scope.defaultDPI\n      } else {\n        scale = unitConversion[theUnit][scope.defaultUnit]\n\n        if (scale < 0) {\n          // Conversion scale to pixels\n\n          scale = unitConversion[theUnit]['in'] * scope.defaultDPI\n        }\n      }\n\n      return scale * parseFloat(string)\n    }\n\n    // Transforms\n\n    function getNodeTransform(node) {\n      if (\n        !(\n          node.hasAttribute('transform') ||\n          (node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y')))\n        )\n      ) {\n        return null\n      }\n\n      const transform = parseNodeTransform(node)\n\n      if (transformStack.length > 0) {\n        transform.premultiply(transformStack[transformStack.length - 1])\n      }\n\n      currentTransform.copy(transform)\n      transformStack.push(transform)\n\n      return transform\n    }\n\n    function parseNodeTransform(node) {\n      const transform = new Matrix3()\n      const currentTransform = tempTransform0\n\n      if (node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y'))) {\n        const tx = parseFloatWithUnits(node.getAttribute('x'))\n        const ty = parseFloatWithUnits(node.getAttribute('y'))\n\n        transform.translate(tx, ty)\n      }\n\n      if (node.hasAttribute('transform')) {\n        const transformsTexts = node.getAttribute('transform').split(')')\n\n        for (let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n          const transformText = transformsTexts[tIndex].trim()\n\n          if (transformText === '') continue\n\n          const openParPos = transformText.indexOf('(')\n          const closeParPos = transformText.length\n\n          if (openParPos > 0 && openParPos < closeParPos) {\n            const transformType = transformText.slice(0, openParPos)\n\n            const array = parseFloats(transformText.slice(openParPos + 1))\n\n            currentTransform.identity()\n\n            switch (transformType) {\n              case 'translate':\n                if (array.length >= 1) {\n                  const tx = array[0]\n                  let ty = 0\n\n                  if (array.length >= 2) {\n                    ty = array[1]\n                  }\n\n                  currentTransform.translate(tx, ty)\n                }\n\n                break\n\n              case 'rotate':\n                if (array.length >= 1) {\n                  let angle = 0\n                  let cx = 0\n                  let cy = 0\n\n                  // Angle\n                  angle = (array[0] * Math.PI) / 180\n\n                  if (array.length >= 3) {\n                    // Center x, y\n                    cx = array[1]\n                    cy = array[2]\n                  }\n\n                  // Rotate around center (cx, cy)\n                  tempTransform1.makeTranslation(-cx, -cy)\n                  tempTransform2.makeRotation(angle)\n                  tempTransform3.multiplyMatrices(tempTransform2, tempTransform1)\n                  tempTransform1.makeTranslation(cx, cy)\n                  currentTransform.multiplyMatrices(tempTransform1, tempTransform3)\n                }\n\n                break\n\n              case 'scale':\n                if (array.length >= 1) {\n                  const scaleX = array[0]\n                  let scaleY = scaleX\n\n                  if (array.length >= 2) {\n                    scaleY = array[1]\n                  }\n\n                  currentTransform.scale(scaleX, scaleY)\n                }\n\n                break\n\n              case 'skewX':\n                if (array.length === 1) {\n                  currentTransform.set(1, Math.tan((array[0] * Math.PI) / 180), 0, 0, 1, 0, 0, 0, 1)\n                }\n\n                break\n\n              case 'skewY':\n                if (array.length === 1) {\n                  currentTransform.set(1, 0, 0, Math.tan((array[0] * Math.PI) / 180), 1, 0, 0, 0, 1)\n                }\n\n                break\n\n              case 'matrix':\n                if (array.length === 6) {\n                  currentTransform.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1)\n                }\n\n                break\n            }\n          }\n\n          transform.premultiply(currentTransform)\n        }\n      }\n\n      return transform\n    }\n\n    function transformPath(path, m) {\n      function transfVec2(v2) {\n        tempV3.set(v2.x, v2.y, 1).applyMatrix3(m)\n\n        v2.set(tempV3.x, tempV3.y)\n      }\n\n      function transfEllipseGeneric(curve) {\n        // For math description see:\n        // https://math.stackexchange.com/questions/4544164\n\n        const a = curve.xRadius\n        const b = curve.yRadius\n\n        const cosTheta = Math.cos(curve.aRotation)\n        const sinTheta = Math.sin(curve.aRotation)\n\n        const v1 = new Vector3(a * cosTheta, a * sinTheta, 0)\n        const v2 = new Vector3(-b * sinTheta, b * cosTheta, 0)\n\n        const f1 = v1.applyMatrix3(m)\n        const f2 = v2.applyMatrix3(m)\n\n        const mF = tempTransform0.set(f1.x, f2.x, 0, f1.y, f2.y, 0, 0, 0, 1)\n\n        const mFInv = tempTransform1.copy(mF).invert()\n        const mFInvT = tempTransform2.copy(mFInv).transpose()\n        const mQ = mFInvT.multiply(mFInv)\n        const mQe = mQ.elements\n\n        const ed = eigenDecomposition(mQe[0], mQe[1], mQe[4])\n        const rt1sqrt = Math.sqrt(ed.rt1)\n        const rt2sqrt = Math.sqrt(ed.rt2)\n\n        curve.xRadius = 1 / rt1sqrt\n        curve.yRadius = 1 / rt2sqrt\n        curve.aRotation = Math.atan2(ed.sn, ed.cs)\n\n        const isFullEllipse = (curve.aEndAngle - curve.aStartAngle) % (2 * Math.PI) < Number.EPSILON\n\n        // Do not touch angles of a full ellipse because after transformation they\n        // would converge to a sinle value effectively removing the whole curve\n\n        if (!isFullEllipse) {\n          const mDsqrt = tempTransform1.set(rt1sqrt, 0, 0, 0, rt2sqrt, 0, 0, 0, 1)\n\n          const mRT = tempTransform2.set(ed.cs, ed.sn, 0, -ed.sn, ed.cs, 0, 0, 0, 1)\n\n          const mDRF = mDsqrt.multiply(mRT).multiply(mF)\n\n          const transformAngle = (phi) => {\n            const { x: cosR, y: sinR } = new Vector3(Math.cos(phi), Math.sin(phi), 0).applyMatrix3(mDRF)\n\n            return Math.atan2(sinR, cosR)\n          }\n\n          curve.aStartAngle = transformAngle(curve.aStartAngle)\n          curve.aEndAngle = transformAngle(curve.aEndAngle)\n\n          if (isTransformFlipped(m)) {\n            curve.aClockwise = !curve.aClockwise\n          }\n        }\n      }\n\n      function transfEllipseNoSkew(curve) {\n        // Faster shortcut if no skew is applied\n        // (e.g, a euclidean transform of a group containing the ellipse)\n\n        const sx = getTransformScaleX(m)\n        const sy = getTransformScaleY(m)\n\n        curve.xRadius *= sx\n        curve.yRadius *= sy\n\n        // Extract rotation angle from the matrix of form:\n        //\n        //  | cosθ sx   -sinθ sy |\n        //  | sinθ sx    cosθ sy |\n        //\n        // Remembering that tanθ = sinθ / cosθ; and that\n        // `sx`, `sy`, or both might be zero.\n        const theta =\n          sx > Number.EPSILON ? Math.atan2(m.elements[1], m.elements[0]) : Math.atan2(-m.elements[3], m.elements[4])\n\n        curve.aRotation += theta\n\n        if (isTransformFlipped(m)) {\n          curve.aStartAngle *= -1\n          curve.aEndAngle *= -1\n          curve.aClockwise = !curve.aClockwise\n        }\n      }\n\n      const subPaths = path.subPaths\n\n      for (let i = 0, n = subPaths.length; i < n; i++) {\n        const subPath = subPaths[i]\n        const curves = subPath.curves\n\n        for (let j = 0; j < curves.length; j++) {\n          const curve = curves[j]\n\n          if (curve.isLineCurve) {\n            transfVec2(curve.v1)\n            transfVec2(curve.v2)\n          } else if (curve.isCubicBezierCurve) {\n            transfVec2(curve.v0)\n            transfVec2(curve.v1)\n            transfVec2(curve.v2)\n            transfVec2(curve.v3)\n          } else if (curve.isQuadraticBezierCurve) {\n            transfVec2(curve.v0)\n            transfVec2(curve.v1)\n            transfVec2(curve.v2)\n          } else if (curve.isEllipseCurve) {\n            // Transform ellipse center point\n\n            tempV2.set(curve.aX, curve.aY)\n            transfVec2(tempV2)\n            curve.aX = tempV2.x\n            curve.aY = tempV2.y\n\n            // Transform ellipse shape parameters\n\n            if (isTransformSkewed(m)) {\n              transfEllipseGeneric(curve)\n            } else {\n              transfEllipseNoSkew(curve)\n            }\n          }\n        }\n      }\n    }\n\n    function isTransformFlipped(m) {\n      const te = m.elements\n      return te[0] * te[4] - te[1] * te[3] < 0\n    }\n\n    function isTransformSkewed(m) {\n      const te = m.elements\n      const basisDot = te[0] * te[3] + te[1] * te[4]\n\n      // Shortcut for trivial rotations and transformations\n      if (basisDot === 0) return false\n\n      const sx = getTransformScaleX(m)\n      const sy = getTransformScaleY(m)\n\n      return Math.abs(basisDot / (sx * sy)) > Number.EPSILON\n    }\n\n    function getTransformScaleX(m) {\n      const te = m.elements\n      return Math.sqrt(te[0] * te[0] + te[1] * te[1])\n    }\n\n    function getTransformScaleY(m) {\n      const te = m.elements\n      return Math.sqrt(te[3] * te[3] + te[4] * te[4])\n    }\n\n    // Calculates the eigensystem of a real symmetric 2x2 matrix\n    //    [ A  B ]\n    //    [ B  C ]\n    // in the form\n    //    [ A  B ]  =  [ cs  -sn ] [ rt1   0  ] [  cs  sn ]\n    //    [ B  C ]     [ sn   cs ] [  0   rt2 ] [ -sn  cs ]\n    // where rt1 >= rt2.\n    //\n    // Adapted from: https://www.mpi-hd.mpg.de/personalhomes/globes/3x3/index.html\n    // -> Algorithms for real symmetric matrices -> Analytical (2x2 symmetric)\n    function eigenDecomposition(A, B, C) {\n      let rt1, rt2, cs, sn, t\n      const sm = A + C\n      const df = A - C\n      const rt = Math.sqrt(df * df + 4 * B * B)\n\n      if (sm > 0) {\n        rt1 = 0.5 * (sm + rt)\n        t = 1 / rt1\n        rt2 = A * t * C - B * t * B\n      } else if (sm < 0) {\n        rt2 = 0.5 * (sm - rt)\n      } else {\n        // This case needs to be treated separately to avoid div by 0\n\n        rt1 = 0.5 * rt\n        rt2 = -0.5 * rt\n      }\n\n      // Calculate eigenvectors\n\n      if (df > 0) {\n        cs = df + rt\n      } else {\n        cs = df - rt\n      }\n\n      if (Math.abs(cs) > 2 * Math.abs(B)) {\n        t = (-2 * B) / cs\n        sn = 1 / Math.sqrt(1 + t * t)\n        cs = t * sn\n      } else if (Math.abs(B) === 0) {\n        cs = 1\n        sn = 0\n      } else {\n        t = (-0.5 * cs) / B\n        cs = 1 / Math.sqrt(1 + t * t)\n        sn = t * cs\n      }\n\n      if (df > 0) {\n        t = cs\n        cs = -sn\n        sn = t\n      }\n\n      return { rt1, rt2, cs, sn }\n    }\n\n    //\n\n    const paths = []\n    const stylesheets = {}\n\n    const transformStack = []\n\n    const tempTransform0 = new Matrix3()\n    const tempTransform1 = new Matrix3()\n    const tempTransform2 = new Matrix3()\n    const tempTransform3 = new Matrix3()\n    const tempV2 = new Vector2()\n    const tempV3 = new Vector3()\n\n    const currentTransform = new Matrix3()\n\n    const xml = new DOMParser().parseFromString(text, 'image/svg+xml') // application/xml\n\n    parseNode(xml.documentElement, {\n      fill: '#000',\n      fillOpacity: 1,\n      strokeOpacity: 1,\n      strokeWidth: 1,\n      strokeLineJoin: 'miter',\n      strokeLineCap: 'butt',\n      strokeMiterLimit: 4,\n    })\n\n    const data = { paths: paths, xml: xml.documentElement }\n\n    // console.log( paths );\n    return data\n  }\n\n  static createShapes(shapePath) {\n    // Param shapePath: a shapepath as returned by the parse function of this class\n    // Returns Shape object\n\n    const BIGNUMBER = 999999999\n\n    const IntersectionLocationType = {\n      ORIGIN: 0,\n      DESTINATION: 1,\n      BETWEEN: 2,\n      LEFT: 3,\n      RIGHT: 4,\n      BEHIND: 5,\n      BEYOND: 6,\n    }\n\n    const classifyResult = {\n      loc: IntersectionLocationType.ORIGIN,\n      t: 0,\n    }\n\n    function findEdgeIntersection(a0, a1, b0, b1) {\n      const x1 = a0.x\n      const x2 = a1.x\n      const x3 = b0.x\n      const x4 = b1.x\n      const y1 = a0.y\n      const y2 = a1.y\n      const y3 = b0.y\n      const y4 = b1.y\n      const nom1 = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)\n      const nom2 = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)\n      const denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1)\n      const t1 = nom1 / denom\n      const t2 = nom2 / denom\n\n      if ((denom === 0 && nom1 !== 0) || t1 <= 0 || t1 >= 1 || t2 < 0 || t2 > 1) {\n        //1. lines are parallel or edges don't intersect\n\n        return null\n      } else if (nom1 === 0 && denom === 0) {\n        //2. lines are colinear\n\n        //check if endpoints of edge2 (b0-b1) lies on edge1 (a0-a1)\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1)\n          //find position of this endpoints relatively to edge1\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1\n            return { x: point.x, y: point.y, t: classifyResult.t }\n          } else if (classifyResult.loc == IntersectionLocationType.BETWEEN) {\n            const x = +(x1 + classifyResult.t * (x2 - x1)).toPrecision(10)\n            const y = +(y1 + classifyResult.t * (y2 - y1)).toPrecision(10)\n            return { x: x, y: y, t: classifyResult.t }\n          }\n        }\n\n        return null\n      } else {\n        //3. edges intersect\n\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1)\n\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1\n            return { x: point.x, y: point.y, t: classifyResult.t }\n          }\n        }\n\n        const x = +(x1 + t1 * (x2 - x1)).toPrecision(10)\n        const y = +(y1 + t1 * (y2 - y1)).toPrecision(10)\n        return { x: x, y: y, t: t1 }\n      }\n    }\n\n    function classifyPoint(p, edgeStart, edgeEnd) {\n      const ax = edgeEnd.x - edgeStart.x\n      const ay = edgeEnd.y - edgeStart.y\n      const bx = p.x - edgeStart.x\n      const by = p.y - edgeStart.y\n      const sa = ax * by - bx * ay\n\n      if (p.x === edgeStart.x && p.y === edgeStart.y) {\n        classifyResult.loc = IntersectionLocationType.ORIGIN\n        classifyResult.t = 0\n        return\n      }\n\n      if (p.x === edgeEnd.x && p.y === edgeEnd.y) {\n        classifyResult.loc = IntersectionLocationType.DESTINATION\n        classifyResult.t = 1\n        return\n      }\n\n      if (sa < -Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.LEFT\n        return\n      }\n\n      if (sa > Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.RIGHT\n        return\n      }\n\n      if (ax * bx < 0 || ay * by < 0) {\n        classifyResult.loc = IntersectionLocationType.BEHIND\n        return\n      }\n\n      if (Math.sqrt(ax * ax + ay * ay) < Math.sqrt(bx * bx + by * by)) {\n        classifyResult.loc = IntersectionLocationType.BEYOND\n        return\n      }\n\n      let t\n\n      if (ax !== 0) {\n        t = bx / ax\n      } else {\n        t = by / ay\n      }\n\n      classifyResult.loc = IntersectionLocationType.BETWEEN\n      classifyResult.t = t\n    }\n\n    function getIntersections(path1, path2) {\n      const intersectionsRaw = []\n      const intersections = []\n\n      for (let index = 1; index < path1.length; index++) {\n        const path1EdgeStart = path1[index - 1]\n        const path1EdgeEnd = path1[index]\n\n        for (let index2 = 1; index2 < path2.length; index2++) {\n          const path2EdgeStart = path2[index2 - 1]\n          const path2EdgeEnd = path2[index2]\n\n          const intersection = findEdgeIntersection(path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd)\n\n          if (\n            intersection !== null &&\n            intersectionsRaw.find(\n              (i) => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON,\n            ) === undefined\n          ) {\n            intersectionsRaw.push(intersection)\n            intersections.push(new Vector2(intersection.x, intersection.y))\n          }\n        }\n      }\n\n      return intersections\n    }\n\n    function getScanlineIntersections(scanline, boundingBox, paths) {\n      const center = new Vector2()\n      boundingBox.getCenter(center)\n\n      const allIntersections = []\n\n      paths.forEach((path) => {\n        // check if the center of the bounding box is in the bounding box of the paths.\n        // this is a pruning method to limit the search of intersections in paths that can't envelop of the current path.\n        // if a path envelops another path. The center of that oter path, has to be inside the bounding box of the enveloping path.\n        if (path.boundingBox.containsPoint(center)) {\n          const intersections = getIntersections(scanline, path.points)\n\n          intersections.forEach((p) => {\n            allIntersections.push({ identifier: path.identifier, isCW: path.isCW, point: p })\n          })\n        }\n      })\n\n      allIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x\n      })\n\n      return allIntersections\n    }\n\n    function isHoleTo(simplePath, allPaths, scanlineMinX, scanlineMaxX, _fillRule) {\n      if (_fillRule === null || _fillRule === undefined || _fillRule === '') {\n        _fillRule = 'nonzero'\n      }\n\n      const centerBoundingBox = new Vector2()\n      simplePath.boundingBox.getCenter(centerBoundingBox)\n\n      const scanline = [new Vector2(scanlineMinX, centerBoundingBox.y), new Vector2(scanlineMaxX, centerBoundingBox.y)]\n\n      const scanlineIntersections = getScanlineIntersections(scanline, simplePath.boundingBox, allPaths)\n\n      scanlineIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x\n      })\n\n      const baseIntersections = []\n      const otherIntersections = []\n\n      scanlineIntersections.forEach((i) => {\n        if (i.identifier === simplePath.identifier) {\n          baseIntersections.push(i)\n        } else {\n          otherIntersections.push(i)\n        }\n      })\n\n      const firstXOfPath = baseIntersections[0].point.x\n\n      // build up the path hierarchy\n      const stack = []\n      let i = 0\n\n      while (i < otherIntersections.length && otherIntersections[i].point.x < firstXOfPath) {\n        if (stack.length > 0 && stack[stack.length - 1] === otherIntersections[i].identifier) {\n          stack.pop()\n        } else {\n          stack.push(otherIntersections[i].identifier)\n        }\n\n        i++\n      }\n\n      stack.push(simplePath.identifier)\n\n      if (_fillRule === 'evenodd') {\n        const isHole = stack.length % 2 === 0 ? true : false\n        const isHoleFor = stack[stack.length - 2]\n\n        return { identifier: simplePath.identifier, isHole: isHole, for: isHoleFor }\n      } else if (_fillRule === 'nonzero') {\n        // check if path is a hole by counting the amount of paths with alternating rotations it has to cross.\n        let isHole = true\n        let isHoleFor = null\n        let lastCWValue = null\n\n        for (let i = 0; i < stack.length; i++) {\n          const identifier = stack[i]\n          if (isHole) {\n            lastCWValue = allPaths[identifier].isCW\n            isHole = false\n            isHoleFor = identifier\n          } else if (lastCWValue !== allPaths[identifier].isCW) {\n            lastCWValue = allPaths[identifier].isCW\n            isHole = true\n          }\n        }\n\n        return { identifier: simplePath.identifier, isHole: isHole, for: isHoleFor }\n      } else {\n        console.warn('fill-rule: \"' + _fillRule + '\" is currently not implemented.')\n      }\n    }\n\n    // check for self intersecting paths\n    // TODO\n\n    // check intersecting paths\n    // TODO\n\n    // prepare paths for hole detection\n    let scanlineMinX = BIGNUMBER\n    let scanlineMaxX = -BIGNUMBER\n\n    let simplePaths = shapePath.subPaths.map((p) => {\n      const points = p.getPoints()\n      let maxY = -BIGNUMBER\n      let minY = BIGNUMBER\n      let maxX = -BIGNUMBER\n      let minX = BIGNUMBER\n\n      //points.forEach(p => p.y *= -1);\n\n      for (let i = 0; i < points.length; i++) {\n        const p = points[i]\n\n        if (p.y > maxY) {\n          maxY = p.y\n        }\n\n        if (p.y < minY) {\n          minY = p.y\n        }\n\n        if (p.x > maxX) {\n          maxX = p.x\n        }\n\n        if (p.x < minX) {\n          minX = p.x\n        }\n      }\n\n      //\n      if (scanlineMaxX <= maxX) {\n        scanlineMaxX = maxX + 1\n      }\n\n      if (scanlineMinX >= minX) {\n        scanlineMinX = minX - 1\n      }\n\n      return {\n        curves: p.curves,\n        points: points,\n        isCW: ShapeUtils.isClockWise(points),\n        identifier: -1,\n        boundingBox: new Box2(new Vector2(minX, minY), new Vector2(maxX, maxY)),\n      }\n    })\n\n    simplePaths = simplePaths.filter((sp) => sp.points.length > 1)\n\n    for (let identifier = 0; identifier < simplePaths.length; identifier++) {\n      simplePaths[identifier].identifier = identifier\n    }\n\n    // check if path is solid or a hole\n    const isAHole = simplePaths.map((p) =>\n      isHoleTo(\n        p,\n        simplePaths,\n        scanlineMinX,\n        scanlineMaxX,\n        shapePath.userData ? shapePath.userData.style.fillRule : undefined,\n      ),\n    )\n\n    const shapesToReturn = []\n    simplePaths.forEach((p) => {\n      const amIAHole = isAHole[p.identifier]\n\n      if (!amIAHole.isHole) {\n        const shape = new Shape()\n        shape.curves = p.curves\n        const holes = isAHole.filter((h) => h.isHole && h.for === p.identifier)\n        holes.forEach((h) => {\n          const hole = simplePaths[h.identifier]\n          const path = new Path()\n          path.curves = hole.curves\n          shape.holes.push(path)\n        })\n        shapesToReturn.push(shape)\n      }\n    })\n\n    return shapesToReturn\n  }\n\n  static getStrokeStyle(width, color, lineJoin, lineCap, miterLimit) {\n    // Param width: Stroke width\n    // Param color: As returned by THREE.Color.getStyle()\n    // Param lineJoin: One of \"round\", \"bevel\", \"miter\" or \"miter-limit\"\n    // Param lineCap: One of \"round\", \"square\" or \"butt\"\n    // Param miterLimit: Maximum join length, in multiples of the \"width\" parameter (join is truncated if it exceeds that distance)\n    // Returns style object\n\n    width = width !== undefined ? width : 1\n    color = color !== undefined ? color : '#000'\n    lineJoin = lineJoin !== undefined ? lineJoin : 'miter'\n    lineCap = lineCap !== undefined ? lineCap : 'butt'\n    miterLimit = miterLimit !== undefined ? miterLimit : 4\n\n    return {\n      strokeColor: color,\n      strokeWidth: width,\n      strokeLineJoin: lineJoin,\n      strokeLineCap: lineCap,\n      strokeMiterLimit: miterLimit,\n    }\n  }\n\n  static pointsToStroke(points, style, arcDivisions, minDistance) {\n    // Generates a stroke with some width around the given path.\n    // The path can be open or closed (last point equals to first point)\n    // Param points: Array of Vector2D (the path). Minimum 2 points.\n    // Param style: Object with SVG properties as returned by SVGLoader.getStrokeStyle(), or SVGLoader.parse() in the path.userData.style object\n    // Params arcDivisions: Arc divisions for round joins and endcaps. (Optional)\n    // Param minDistance: Points closer to this distance will be merged. (Optional)\n    // Returns BufferGeometry with stroke triangles (In plane z = 0). UV coordinates are generated ('u' along path. 'v' across it, from left to right)\n\n    const vertices = []\n    const normals = []\n    const uvs = []\n\n    if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n      return null\n    }\n\n    const geometry = new BufferGeometry()\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3))\n    geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3))\n    geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2))\n\n    return geometry\n  }\n\n  static pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n    // This function can be called to update existing arrays or buffers.\n    // Accepts same parameters as pointsToStroke, plus the buffers and optional offset.\n    // Param vertexOffset: Offset vertices to start writing in the buffers (3 elements/vertex for vertices and normals, and 2 elements/vertex for uvs)\n    // Returns number of written vertices / normals / uvs pairs\n    // if 'vertices' parameter is undefined no triangles will be generated, but the returned vertices count will still be valid (useful to preallocate the buffers)\n    // 'normals' and 'uvs' buffers are optional\n\n    const tempV2_1 = new Vector2()\n    const tempV2_2 = new Vector2()\n    const tempV2_3 = new Vector2()\n    const tempV2_4 = new Vector2()\n    const tempV2_5 = new Vector2()\n    const tempV2_6 = new Vector2()\n    const tempV2_7 = new Vector2()\n    const lastPointL = new Vector2()\n    const lastPointR = new Vector2()\n    const point0L = new Vector2()\n    const point0R = new Vector2()\n    const currentPointL = new Vector2()\n    const currentPointR = new Vector2()\n    const nextPointL = new Vector2()\n    const nextPointR = new Vector2()\n    const innerPoint = new Vector2()\n    const outerPoint = new Vector2()\n\n    arcDivisions = arcDivisions !== undefined ? arcDivisions : 12\n    minDistance = minDistance !== undefined ? minDistance : 0.001\n    vertexOffset = vertexOffset !== undefined ? vertexOffset : 0\n\n    // First ensure there are no duplicated points\n    points = removeDuplicatedPoints(points)\n\n    const numPoints = points.length\n\n    if (numPoints < 2) return 0\n\n    const isClosed = points[0].equals(points[numPoints - 1])\n\n    let currentPoint\n    let previousPoint = points[0]\n    let nextPoint\n\n    const strokeWidth2 = style.strokeWidth / 2\n\n    const deltaU = 1 / (numPoints - 1)\n    let u0 = 0,\n      u1\n\n    let innerSideModified\n    let joinIsOnLeftSide\n    let isMiter\n    let initialJoinIsOnLeftSide = false\n\n    let numVertices = 0\n    let currentCoordinate = vertexOffset * 3\n    let currentCoordinateUV = vertexOffset * 2\n\n    // Get initial left and right stroke points\n    getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2)\n    lastPointL.copy(points[0]).sub(tempV2_1)\n    lastPointR.copy(points[0]).add(tempV2_1)\n    point0L.copy(lastPointL)\n    point0R.copy(lastPointR)\n\n    for (let iPoint = 1; iPoint < numPoints; iPoint++) {\n      currentPoint = points[iPoint]\n\n      // Get next point\n      if (iPoint === numPoints - 1) {\n        if (isClosed) {\n          // Skip duplicated initial point\n          nextPoint = points[1]\n        } else nextPoint = undefined\n      } else {\n        nextPoint = points[iPoint + 1]\n      }\n\n      // Normal of previous segment in tempV2_1\n      const normal1 = tempV2_1\n      getNormal(previousPoint, currentPoint, normal1)\n\n      tempV2_3.copy(normal1).multiplyScalar(strokeWidth2)\n      currentPointL.copy(currentPoint).sub(tempV2_3)\n      currentPointR.copy(currentPoint).add(tempV2_3)\n\n      u1 = u0 + deltaU\n\n      innerSideModified = false\n\n      if (nextPoint !== undefined) {\n        // Normal of next segment in tempV2_2\n        getNormal(currentPoint, nextPoint, tempV2_2)\n\n        tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2)\n        nextPointL.copy(currentPoint).sub(tempV2_3)\n        nextPointR.copy(currentPoint).add(tempV2_3)\n\n        joinIsOnLeftSide = true\n        tempV2_3.subVectors(nextPoint, previousPoint)\n        if (normal1.dot(tempV2_3) < 0) {\n          joinIsOnLeftSide = false\n        }\n\n        if (iPoint === 1) initialJoinIsOnLeftSide = joinIsOnLeftSide\n\n        tempV2_3.subVectors(nextPoint, currentPoint)\n        tempV2_3.normalize()\n        const dot = Math.abs(normal1.dot(tempV2_3))\n\n        // If path is straight, don't create join\n        if (dot > Number.EPSILON) {\n          // Compute inner and outer segment intersections\n          const miterSide = strokeWidth2 / dot\n          tempV2_3.multiplyScalar(-miterSide)\n          tempV2_4.subVectors(currentPoint, previousPoint)\n          tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3)\n          innerPoint.copy(tempV2_5).negate()\n          const miterLength2 = tempV2_5.length()\n          const segmentLengthPrev = tempV2_4.length()\n          tempV2_4.divideScalar(segmentLengthPrev)\n          tempV2_6.subVectors(nextPoint, currentPoint)\n          const segmentLengthNext = tempV2_6.length()\n          tempV2_6.divideScalar(segmentLengthNext)\n          // Check that previous and next segments doesn't overlap with the innerPoint of intersection\n          if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n            innerSideModified = true\n          }\n\n          outerPoint.copy(tempV2_5).add(currentPoint)\n          innerPoint.add(currentPoint)\n\n          isMiter = false\n\n          if (innerSideModified) {\n            if (joinIsOnLeftSide) {\n              nextPointR.copy(innerPoint)\n              currentPointR.copy(innerPoint)\n            } else {\n              nextPointL.copy(innerPoint)\n              currentPointL.copy(innerPoint)\n            }\n          } else {\n            // The segment triangles are generated here if there was overlapping\n\n            makeSegmentTriangles()\n          }\n\n          switch (style.strokeLineJoin) {\n            case 'bevel':\n              makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1)\n\n              break\n\n            case 'round':\n              // Segment triangles\n\n              createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified)\n\n              // Join triangles\n\n              if (joinIsOnLeftSide) {\n                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0)\n              } else {\n                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1)\n              }\n\n              break\n\n            case 'miter':\n            case 'miter-clip':\n            default:\n              const miterFraction = (strokeWidth2 * style.strokeMiterLimit) / miterLength2\n\n              if (miterFraction < 1) {\n                // The join miter length exceeds the miter limit\n\n                if (style.strokeLineJoin !== 'miter-clip') {\n                  makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1)\n                  break\n                } else {\n                  // Segment triangles\n\n                  createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified)\n\n                  // Miter-clip join triangles\n\n                  if (joinIsOnLeftSide) {\n                    tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL)\n                    tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL)\n\n                    addVertex(currentPointL, u1, 0)\n                    addVertex(tempV2_6, u1, 0)\n                    addVertex(currentPoint, u1, 0.5)\n\n                    addVertex(currentPoint, u1, 0.5)\n                    addVertex(tempV2_6, u1, 0)\n                    addVertex(tempV2_7, u1, 0)\n\n                    addVertex(currentPoint, u1, 0.5)\n                    addVertex(tempV2_7, u1, 0)\n                    addVertex(nextPointL, u1, 0)\n                  } else {\n                    tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR)\n                    tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR)\n\n                    addVertex(currentPointR, u1, 1)\n                    addVertex(tempV2_6, u1, 1)\n                    addVertex(currentPoint, u1, 0.5)\n\n                    addVertex(currentPoint, u1, 0.5)\n                    addVertex(tempV2_6, u1, 1)\n                    addVertex(tempV2_7, u1, 1)\n\n                    addVertex(currentPoint, u1, 0.5)\n                    addVertex(tempV2_7, u1, 1)\n                    addVertex(nextPointR, u1, 1)\n                  }\n                }\n              } else {\n                // Miter join segment triangles\n\n                if (innerSideModified) {\n                  // Optimized segment + join triangles\n\n                  if (joinIsOnLeftSide) {\n                    addVertex(lastPointR, u0, 1)\n                    addVertex(lastPointL, u0, 0)\n                    addVertex(outerPoint, u1, 0)\n\n                    addVertex(lastPointR, u0, 1)\n                    addVertex(outerPoint, u1, 0)\n                    addVertex(innerPoint, u1, 1)\n                  } else {\n                    addVertex(lastPointR, u0, 1)\n                    addVertex(lastPointL, u0, 0)\n                    addVertex(outerPoint, u1, 1)\n\n                    addVertex(lastPointL, u0, 0)\n                    addVertex(innerPoint, u1, 0)\n                    addVertex(outerPoint, u1, 1)\n                  }\n\n                  if (joinIsOnLeftSide) {\n                    nextPointL.copy(outerPoint)\n                  } else {\n                    nextPointR.copy(outerPoint)\n                  }\n                } else {\n                  // Add extra miter join triangles\n\n                  if (joinIsOnLeftSide) {\n                    addVertex(currentPointL, u1, 0)\n                    addVertex(outerPoint, u1, 0)\n                    addVertex(currentPoint, u1, 0.5)\n\n                    addVertex(currentPoint, u1, 0.5)\n                    addVertex(outerPoint, u1, 0)\n                    addVertex(nextPointL, u1, 0)\n                  } else {\n                    addVertex(currentPointR, u1, 1)\n                    addVertex(outerPoint, u1, 1)\n                    addVertex(currentPoint, u1, 0.5)\n\n                    addVertex(currentPoint, u1, 0.5)\n                    addVertex(outerPoint, u1, 1)\n                    addVertex(nextPointR, u1, 1)\n                  }\n                }\n\n                isMiter = true\n              }\n\n              break\n          }\n        } else {\n          // The segment triangles are generated here when two consecutive points are collinear\n\n          makeSegmentTriangles()\n        }\n      } else {\n        // The segment triangles are generated here if it is the ending segment\n\n        makeSegmentTriangles()\n      }\n\n      if (!isClosed && iPoint === numPoints - 1) {\n        // Start line endcap\n        addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0)\n      }\n\n      // Increment loop variables\n\n      u0 = u1\n\n      previousPoint = currentPoint\n\n      lastPointL.copy(nextPointL)\n      lastPointR.copy(nextPointR)\n    }\n\n    if (!isClosed) {\n      // Ending line endcap\n      addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1)\n    } else if (innerSideModified && vertices) {\n      // Modify path first segment vertices to adjust to the segments inner and outer intersections\n\n      let lastOuter = outerPoint\n      let lastInner = innerPoint\n\n      if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n        lastOuter = innerPoint\n        lastInner = outerPoint\n      }\n\n      if (joinIsOnLeftSide) {\n        if (isMiter || initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 0 * 3)\n          lastInner.toArray(vertices, 3 * 3)\n\n          if (isMiter) {\n            lastOuter.toArray(vertices, 1 * 3)\n          }\n        }\n      } else {\n        if (isMiter || !initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 1 * 3)\n          lastInner.toArray(vertices, 3 * 3)\n\n          if (isMiter) {\n            lastOuter.toArray(vertices, 0 * 3)\n          }\n        }\n      }\n    }\n\n    return numVertices\n\n    // -- End of algorithm\n\n    // -- Functions\n\n    function getNormal(p1, p2, result) {\n      result.subVectors(p2, p1)\n      return result.set(-result.y, result.x).normalize()\n    }\n\n    function addVertex(position, u, v) {\n      if (vertices) {\n        vertices[currentCoordinate] = position.x\n        vertices[currentCoordinate + 1] = position.y\n        vertices[currentCoordinate + 2] = 0\n\n        if (normals) {\n          normals[currentCoordinate] = 0\n          normals[currentCoordinate + 1] = 0\n          normals[currentCoordinate + 2] = 1\n        }\n\n        currentCoordinate += 3\n\n        if (uvs) {\n          uvs[currentCoordinateUV] = u\n          uvs[currentCoordinateUV + 1] = v\n\n          currentCoordinateUV += 2\n        }\n      }\n\n      numVertices += 3\n    }\n\n    function makeCircularSector(center, p1, p2, u, v) {\n      // param p1, p2: Points in the circle arc.\n      // p1 and p2 are in clockwise direction.\n\n      tempV2_1.copy(p1).sub(center).normalize()\n      tempV2_2.copy(p2).sub(center).normalize()\n\n      let angle = Math.PI\n      const dot = tempV2_1.dot(tempV2_2)\n      if (Math.abs(dot) < 1) angle = Math.abs(Math.acos(dot))\n\n      angle /= arcDivisions\n\n      tempV2_3.copy(p1)\n\n      for (let i = 0, il = arcDivisions - 1; i < il; i++) {\n        tempV2_4.copy(tempV2_3).rotateAround(center, angle)\n\n        addVertex(tempV2_3, u, v)\n        addVertex(tempV2_4, u, v)\n        addVertex(center, u, 0.5)\n\n        tempV2_3.copy(tempV2_4)\n      }\n\n      addVertex(tempV2_4, u, v)\n      addVertex(p2, u, v)\n      addVertex(center, u, 0.5)\n    }\n\n    function makeSegmentTriangles() {\n      addVertex(lastPointR, u0, 1)\n      addVertex(lastPointL, u0, 0)\n      addVertex(currentPointL, u1, 0)\n\n      addVertex(lastPointR, u0, 1)\n      addVertex(currentPointL, u1, 0)\n      addVertex(currentPointR, u1, 1)\n    }\n\n    function makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u) {\n      if (innerSideModified) {\n        // Optimized segment + bevel triangles\n\n        if (joinIsOnLeftSide) {\n          // Path segments triangles\n\n          addVertex(lastPointR, u0, 1)\n          addVertex(lastPointL, u0, 0)\n          addVertex(currentPointL, u1, 0)\n\n          addVertex(lastPointR, u0, 1)\n          addVertex(currentPointL, u1, 0)\n          addVertex(innerPoint, u1, 1)\n\n          // Bevel join triangle\n\n          addVertex(currentPointL, u, 0)\n          addVertex(nextPointL, u, 0)\n          addVertex(innerPoint, u, 0.5)\n        } else {\n          // Path segments triangles\n\n          addVertex(lastPointR, u0, 1)\n          addVertex(lastPointL, u0, 0)\n          addVertex(currentPointR, u1, 1)\n\n          addVertex(lastPointL, u0, 0)\n          addVertex(innerPoint, u1, 0)\n          addVertex(currentPointR, u1, 1)\n\n          // Bevel join triangle\n\n          addVertex(currentPointR, u, 1)\n          addVertex(innerPoint, u, 0)\n          addVertex(nextPointR, u, 1)\n        }\n      } else {\n        // Bevel join triangle. The segment triangles are done in the main loop\n\n        if (joinIsOnLeftSide) {\n          addVertex(currentPointL, u, 0)\n          addVertex(nextPointL, u, 0)\n          addVertex(currentPoint, u, 0.5)\n        } else {\n          addVertex(currentPointR, u, 1)\n          addVertex(nextPointR, u, 0)\n          addVertex(currentPoint, u, 0.5)\n        }\n      }\n    }\n\n    function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified) {\n      if (innerSideModified) {\n        if (joinIsOnLeftSide) {\n          addVertex(lastPointR, u0, 1)\n          addVertex(lastPointL, u0, 0)\n          addVertex(currentPointL, u1, 0)\n\n          addVertex(lastPointR, u0, 1)\n          addVertex(currentPointL, u1, 0)\n          addVertex(innerPoint, u1, 1)\n\n          addVertex(currentPointL, u0, 0)\n          addVertex(currentPoint, u1, 0.5)\n          addVertex(innerPoint, u1, 1)\n\n          addVertex(currentPoint, u1, 0.5)\n          addVertex(nextPointL, u0, 0)\n          addVertex(innerPoint, u1, 1)\n        } else {\n          addVertex(lastPointR, u0, 1)\n          addVertex(lastPointL, u0, 0)\n          addVertex(currentPointR, u1, 1)\n\n          addVertex(lastPointL, u0, 0)\n          addVertex(innerPoint, u1, 0)\n          addVertex(currentPointR, u1, 1)\n\n          addVertex(currentPointR, u0, 1)\n          addVertex(innerPoint, u1, 0)\n          addVertex(currentPoint, u1, 0.5)\n\n          addVertex(currentPoint, u1, 0.5)\n          addVertex(innerPoint, u1, 0)\n          addVertex(nextPointR, u0, 1)\n        }\n      }\n    }\n\n    function addCapGeometry(center, p1, p2, joinIsOnLeftSide, start, u) {\n      // param center: End point of the path\n      // param p1, p2: Left and right cap points\n\n      switch (style.strokeLineCap) {\n        case 'round':\n          if (start) {\n            makeCircularSector(center, p2, p1, u, 0.5)\n          } else {\n            makeCircularSector(center, p1, p2, u, 0.5)\n          }\n\n          break\n\n        case 'square':\n          if (start) {\n            tempV2_1.subVectors(p1, center)\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x)\n\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center)\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center)\n\n            // Modify already existing vertices\n            if (joinIsOnLeftSide) {\n              tempV2_3.toArray(vertices, 1 * 3)\n              tempV2_4.toArray(vertices, 0 * 3)\n              tempV2_4.toArray(vertices, 3 * 3)\n            } else {\n              tempV2_3.toArray(vertices, 1 * 3)\n              // using tempV2_4 to update 3rd vertex if the uv.y of 3rd vertex is 1\n              uvs[3 * 2 + 1] === 1 ? tempV2_4.toArray(vertices, 3 * 3) : tempV2_3.toArray(vertices, 3 * 3)\n              tempV2_4.toArray(vertices, 0 * 3)\n            }\n          } else {\n            tempV2_1.subVectors(p2, center)\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x)\n\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center)\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center)\n\n            const vl = vertices.length\n\n            // Modify already existing vertices\n            if (joinIsOnLeftSide) {\n              tempV2_3.toArray(vertices, vl - 1 * 3)\n              tempV2_4.toArray(vertices, vl - 2 * 3)\n              tempV2_4.toArray(vertices, vl - 4 * 3)\n            } else {\n              tempV2_4.toArray(vertices, vl - 2 * 3)\n              tempV2_3.toArray(vertices, vl - 1 * 3)\n              tempV2_4.toArray(vertices, vl - 4 * 3)\n            }\n          }\n\n          break\n\n        case 'butt':\n        default:\n          // Nothing to do here\n          break\n      }\n    }\n\n    function removeDuplicatedPoints(points) {\n      // Creates a new array if necessary with duplicated points removed.\n      // This does not remove duplicated initial and ending points of a closed path.\n\n      let dupPoints = false\n      for (let i = 1, n = points.length - 1; i < n; i++) {\n        if (points[i].distanceTo(points[i + 1]) < minDistance) {\n          dupPoints = true\n          break\n        }\n      }\n\n      if (!dupPoints) return points\n\n      const newPoints = []\n      newPoints.push(points[0])\n\n      for (let i = 1, n = points.length - 1; i < n; i++) {\n        if (points[i].distanceTo(points[i + 1]) >= minDistance) {\n          newPoints.push(points[i])\n        }\n      }\n\n      newPoints.push(points[points.length - 1])\n\n      return newPoints\n    }\n  }\n}\n\nexport { SVGLoader }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}